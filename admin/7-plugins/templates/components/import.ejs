<style>
    .notsupportitem i {
        font-size: 140px;
    }
</style>
<script>
    var viewModel = MODAL.getViewData();
    <%= DATA.scope %>.galleryFiles = {};
    <%= DATA.scope %>.galleryFiles.viewModel = viewModel;
    <%= DATA.scope %>.galleryFiles.data = {};
    <%= DATA.scope %>.galleryFiles.data.files = [];
    <%= DATA.scope %>.galleryFiles.upload = false;
    <%= DATA.scope %>.galleryFiles.rootFolder = viewModel.root;
    <%= DATA.scope %>.galleryFiles.refresh = function () {
        var http = new HTTP();
        DRAGONAPI.ajax.get(http.path(["files", "api"]), {folder: viewModel.root}, function (data) {
            for (var i in data.data.files) {
                var file = data.data.files[i];
                data.data.files[i] = {
                    url: `${http.path([FOLDERS.files, viewModel.root])}/${file}`,
                    cleanUrl: http.cleanRoot(`${http.path([FOLDERS.files, viewModel.root])}${file}`),
                    selected: false,
                    fileName: file,
                    original: file.split('___')[0],
                    ext: FILE.extension(file),
                }
                data.data.files[i].originalCrop = data.data.files[i].original;
            }
            <%= DATA.scope %>.
            galleryFiles.data = data.data;
            <%= DATA.scope %>.
            galleryFiles.columns = (12 / viewModel.columns);
            <%= DATA.scope %>.
            refreshAngular();
        });
    };
    <%= DATA.scope %>.galleryFiles.refresh();
    <%= DATA.scope %>.galleryFiles.isSingle = function () {
        return <%= DATA.scope %>.
        galleryFiles.viewModel.maxfiles == 1;
    };
    <%= DATA.scope %>.galleryFiles.reachMaxFiles = function () {
        return <%= DATA.scope %>.
        galleryFiles.data.files.length < <%= DATA.scope %>.
        galleryFiles.viewModel.maxfiles;
    };
    <%= DATA.scope %>.galleryFiles.uploadview = function (file) {
        <%= DATA.scope %>.
        galleryFiles.upload = !<%= DATA.scope %>.
        galleryFiles.upload;
    };
    <%= DATA.scope %>.galleryFiles.Icon = function (file) {
        if (DSON.oseaX(file))
            return "";
        if (FILE.isImage(file.fileName)) {
            return "";
        } else {
            return FILE.fileToIcon(file.fileName);
        }
    };
    <%= DATA.scope %>.galleryFiles.view = function (file) {
        var load = new LOAD();
        if (FILE.isImage(file.fileName)) {
            load.template('templates/components/crop', {src: file.url}, function (html) {
                <%= DATA.scope %>.
                modal.simpleModal(html, {header: {title: MESSAGE.i('mono.preview')}});
            });
        } else {
            load.template('templates/components/object', {src: file.url}, function (html) {
                <%= DATA.scope %>.
                modal.simpleModal(html, {header: {title: MESSAGE.ic('mono.preview')}});
            });
        }
    };
    <%= DATA.scope %>.galleryFiles.check = function (file) {
        file.selected = !file.selected;
    };
    <%= DATA.scope %>.galleryFiles.allChecked = function () {
        var allSelected = <%= DATA.scope %>.
        galleryFiles.data.files.filter(function (file) {
            return !file.selected;
        });
        return allSelected.length === 0;
    };
    <%= DATA.scope %>.galleryFiles.allCheckedText = function () {
        return <%= DATA.scope %>.
        galleryFiles.allChecked() ? "UnCheck" : "Check";
    };

    <%= DATA.scope %>.galleryFiles.allCheckedIcon = function () {
        return !<%= DATA.scope %>.
        galleryFiles.allChecked() ? "checkbox-unchecked" : "checkbox-checked";
    };
    <%= DATA.scope %>.galleryFiles.checkAll = function () {
        if (<%= DATA.scope %>.
        galleryFiles.allChecked()
    )

        {
            for (var file of <%= DATA.scope %>.
            galleryFiles.data.files
        )
            {
                file.selected = false;
            }
        }
    else
        {
            for (var file of <%= DATA.scope %>.
            galleryFiles.data.files
        )
            {
                file.selected = true;
            }
        }
    };
    <%= DATA.scope %>.galleryFiles.getIcon = function (file) {
        return !file.selected ? "checkbox-unchecked" : "checkbox-checked";
    };
    <%= DATA.scope %>.galleryFiles.deleteSelected = function () {
        var allSelected = <%= DATA.scope %>.
        galleryFiles.data.files.filter(function (file) {
            return file.selected;
        });
        <%= DATA.scope %>.
        galleryFiles.delete(allSelected);
    };
    <%= DATA.scope %>.galleryFiles.delete = function (files) {
        var finalArray = [];
        if (!Array.isArray(files)) {
            finalArray.push(files.cleanUrl);
        } else
            for (var i in files) {
                finalArray.push(files[i].cleanUrl);
            }
        SWEETALERT.confirm({
            message: MESSAGE.i('alerts.AYSDeleteFile'),
            confirm: function () {
                var http = new HTTP();
                SWEETALERT.loading({message: MESSAGE.i('mono.deleting')});
                DRAGONAPI.ajax.post(http.path(["files", "api", "delete"]), {filename: finalArray}, function (data) {
                    SWEETALERT.stop();
                    if (data.data.deleted) {
                        <%= DATA.scope %>.
                        galleryFiles.refresh();
                    }
                });
            }
        });
    };

    <%= DATA.scope %>.galleryFiles.import = function (files) {
        var finalArray = [];
        if (!Array.isArray(files)) {
            finalArray.push(files.cleanUrl);
        } else
            for (var i in files) {
                finalArray.push(files[i].cleanUrl);
            }
        SWEETALERT.confirm({
            message: MESSAGE.i('alerts.AYSImport'),
            confirm: function () {
                SWEETALERT.loading({message: MESSAGE.i('mono.importing')});
                var http = new HTTP();
                DRAGONAPI.ajax.post(http.path(["files", "api", "import"]), {filename: finalArray}, function (data) {
                    SWEETALERT.stop();
                    var records = data.data;
                    var columns = eval(`CRUD_<%= DATA.scope %>`).table.columns;
                    var inserts = [];
                    for (var i in records) {
                        var record = records[i];
                        var row = {};
                        var relations = [];
                        for (var i in record) {
                            var key = i;
                            var value = record[i];
                            if (value.startsWith('"')) {
                                value = value.substring(1, value.length);
                            }
                            if (value.endsWith('"')) {
                                value = value.substring(0, value.length - 1);
                            }
                            for (var c in columns) {
                                var column = false;
                                if (c === key || key === columns[c].exportKey)
                                    column = columns[c];
                                if (column === false) continue;
                                if (key.indexOf('$$') === -1) {
                                    eval(`row.${key} = '${value}';`);
                                } else
                                    relations.push({
                                        table: column.multilink.table,
                                        from: column.multilink.getList,
                                        to: column.multilink.to,
                                        values: value.split(',')
                                    });
                                break;
                            }
                        }
                        inserts.push({row: row, relations: relations});
                    }
                    <%= DATA.scope %>.
                    importing(inserts);
                });
            }
        });
    };

    <%= DATA.scope %>.galleryFiles.downloadAll = function () {
        SWEETALERT.confirm({
            message: MESSAGE.i('alerts.AYSDownloadAll'),
            confirm: function () {
                var http = new HTTP();
                SWEETALERT.loading({message: MESSAGE.i('mono.Preparingdownloadforfiles')});
                DRAGONAPI.ajax.get(http.path(["files", "api", "download"]), {
                    folder: viewModel.root,
                    name: MODAL.current().header.title + ".zip"
                }, function (data) {
                    SWEETALERT.stop();
                    var url = http.path(["files", viewModel.root, MODAL.current().header.title + ".zip"]);
                    DOWNLOAD.fileUrl(url, MODAL.current().header.title + ".zip");
                });
            }
        });
    };
</script>
<div dragonlanguage=""
     ng-show="<%= DATA.scope %>.galleryFiles.columns && <%= DATA.scope %>.galleryFiles.data.files.length<=0"
     class="alert alpha-<%= COLOR.secundary %> border-<%= COLOR.secundary %> alert-styled-left">
    <language>MESSAGE.i('mono.Thereisnofilestoshow')</language>
</div>

<div dragonlanguage=""
     ng-show="<%= DATA.scope %>.galleryFiles.columns && <%= DATA.scope %>.galleryFiles.data.files.length<=0"
     class="alert alpha-warning border-warning alert-styled-left">
    <language>MESSAGE.i('export.used')</language>
</div>

<div class="btn-group btn-group-justified">


    <div class="btn-group" ng-show="<%= DATA.scope %>.galleryFiles.reachMaxFiles()">
        <button ng-click="<%= DATA.scope %>.galleryFiles.uploadview()" type="button"

                class="btn bg-<%= COLOR.secundary %>-600 btn-icon">
            <span class="icon-upload"></span> Upload
        </button>
    </div>

    <div class="btn-group" ng-show="!<%= DATA.scope %>.galleryFiles.isSingle()">
        <button ng-click="<%= DATA.scope %>.galleryFiles.downloadAll()" type="button"
                class="btn bg-<%= COLOR.secundary %>-600 btn-icon">
            <span class="icon-download"></span> Download All
        </button>
    </div>

    <div class="btn-group" ng-show="!<%= DATA.scope %>.galleryFiles.isSingle()">
        <button ng-click="<%= DATA.scope %>.galleryFiles.checkAll()" type="button"
                class="btn bg-<%= COLOR.secundary %>-600 btn-icon">
            <span class="icon-{{<%= DATA.scope %>.galleryFiles.allCheckedIcon()}}"></span> {{<%= DATA.scope %>
            .galleryFiles.allCheckedText()}} All
        </button>

    </div>

    <div class="btn-group" ng-show="!<%= DATA.scope %>.galleryFiles.isSingle()">
        <button ng-click="<%= DATA.scope %>.galleryFiles.deleteSelected()" type="button"
                class="btn bg-<%= COLOR.secundary %>-600 btn-icon">
            <span class="icon-trash"></span> Remove Seleted
        </button>
    </div>


</div>
<div class="panel panel-flat"
     ng-show="(<%= DATA.scope %>.galleryFiles.upload && <%= DATA.scope %>.galleryFiles.columns) && <%= DATA.scope %>.galleryFiles.reachMaxFiles()">
    <div class="panel-heading">
        <h5 dragonlanguage class="panel-title">
            <language>MESSAGE.i('alerts.SelectorDropFiles')</language>
        </h5>
    </div>
    <div class="panel-body">
        <form class="dropzone" id="filesForm" method="post" enctype="multipart/form-data">
            <input type="hidden" name="folder" value="{{<%= DATA.scope %>.galleryFiles.rootFolder}}">
            <input type="hidden" name="user" value="{{DRAGON.userID}}">

        </form>
    </div>
</div>
<div id="galleryFiles">

    <table style="margin-top: 15px" class=" table table-togglable table-framed table-bordered">
        <thead>
        <tr class="bg-<%= COLOR.secundary %>">
            <th>File</th>
            <th>Options</th>
        </tr>
        </thead>
        <tbody>

        <tr ng-repeat="(key,file) in <%= DATA.scope %>.galleryFiles.data.files track by key">
            <td>
                <a title="{{file.original}}">{{file.originalCrop}}</a>
            </td>
            <td>
                <a
                        title="preview" ng-click="<%= DATA.scope %>.galleryFiles.view(file)"
                        class="btn  border-<%= COLOR.primary %>-300 text-black btn-icon"
                >
                    <i class="icon-zoomin3"></i>
                </a>
                <a
                        title="download" href="{{file.url}}" download="{{file.original}}"
                        class="btn  border-<%= COLOR.primary %>-300 text-black btn-icon"
                >
                    <i class="icon-download"></i>
                </a>
                <a
                        title="delete"
                        ng-click="<%= DATA.scope %>.galleryFiles.delete(file)"
                        class="btn  border-<%= COLOR.primary %>-300 text-black btn-icon"
                >
                    <i class="icon-trash"></i>
                </a>

                <a
                        title="import"
                        ng-click="<%= DATA.scope %>.galleryFiles.import(file)"
                        class="btn  border-<%= COLOR.primary %>-300 text-black btn-icon"
                >
                    <i class="icon-upload4"></i>
                </a>

                <a
                        ng-click="<%= DATA.scope %>.galleryFiles.check(file)"
                        class="btn  border-<%= COLOR.primary %>-300 text-black btn-icon">
                    <i class="icon-{{<%= DATA.scope %>.galleryFiles.getIcon(file)}} position-left"></i>
                </a>
            </td>

        </tr>

        </tbody>
    </table>
</div>
<script>
    $(document).ready(function () {
        var http = new HTTP();
        $("#filesForm").attr('action', http.path(["files", "api", "upload"]));
        $("#filesForm").dropzone({
            paramName: "toupload", // The name that will be used to transfer the file
            dictDefaultMessage: MESSAGE.i('alerts.upload'),
            maxFilesize: viewModel.maxsize || 20, // MB
            maxFiles: viewModel.maxfiles || 20,
            acceptedFiles: viewModel.acceptedFiles || null,
            init: function () {
                this.on('complete', function (file) {
                    this.removeFile(file);
                    <%= DATA.scope %>.
                    galleryFiles.uploadview();
                    <%= DATA.scope %>.
                    galleryFiles.refresh();
                });
                this.on('completemultiple', function (file) {
                    <%= DATA.scope %>.
                    galleryFiles.refresh();
                });
            }
        });
    });
</script>