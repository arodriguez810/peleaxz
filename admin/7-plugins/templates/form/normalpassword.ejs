<%
if(DATA.name!==undefined){
    var name, model, opts;
    name = DATA.name;
    model = DATA.model;
    opts = DATA.opts;
}
var name  = name || "";
var options = {
    placeholder: params.capitalize(name),
    type: "text",
    icon: {
        class: "lock",
        position: "left",
        color: TAG.table + "-800"
    },
    helptext: '',
    format: '',
    readonly: false,
    disabled: false,
    autocomplete: '',
    isPassword: true,
    posttype: "text",
    normal: false,
    //maxlength: 10,

};
options = OBJECT.merge(options, opts); var nameclean = name.replace(/\./g, '_');
options.autocomplete = options.autocomplete ? "autocomplete='Off'" : '';
options.model = options.model ? options.model : false;
var toclient = JSON.stringify(options);
%>
<script>
    <%= model %>.triggers.table.before.control("<%= nameclean %>");
    <%= model %>.form.schemas.select["<%= name %>"] = FORM.schemasType.password;
    <%= model %>.form.schemas.insert["<%= name %>"] = FORM.schemasType.password;
    <%= model %>.form.registerField("<%= name %>", "<%= toclient %>");
    if (MESSAGE.exist('columns.<%= nameclean %>')) {
        <%= model %>.
        form.options.<%= name %>.placeholder = MESSAGE.i('columns.<%= nameclean %>');
    }
</script>
<div class="form-group-material form-group has-feedback has-{{<%= model %>.validate['<%= name %>'].type || <%= model %>.defaultColor }}  has-feedback-{{<%= model %>.form.options.<%= name %>.icon.position}}"
     id="input<%= model %>_<%= nameclean %>">
    <label
            id="label<%= model %>_<%= nameclean %>"
            class="control-label {{<%= model + "." + name %>?'is-visible animate':(<%= model + "." + name %>==0?'is-visible animate':'')}}">
        {{<%= model %>.form.options.<%= name %>.placeholder}}
    </label>

    <input
            autocomplete="off"
            ng-model="<%= model + "." + name %>" name="<%= model %>_<%= nameclean %>"
            ng-readonly="<%= model %>.form.options.<%= name %>.readonly"
            ng-disabled="<%= model %>.form.options.<%= name %>.disabled"
            maxlength="{{<%= model %>.form.options.<%= name %>.maxlength}}"
            type="password"
            <%= options.model ? "value='{{" + options.model + "}}'" : "" %>
            class="form-control pw"
            placeholder="{{<%= model %>.form.options.<%= name %>.placeholder}}">

    <div class="form-control-feedback" ng-if="<%= model %>.form.options.<%= name %>.icon.class!=='none'">
        <i class="icon-{{<%= model %>.form.options.<%= name %>.icon.class}} text-{{<%= model %>.validate['<%= name %>'].type || <%= model %>.defaultColor }}">

        </i>
    </div>
    <span ng-if="<%= model %>.form.options.<%= name %>.helptext!=''"
          class="help-block text-muted">
        {{<%= model %>.form.options.<%= name %>.helptext}}
    </span>

    <span ng-show="<%= model %>.validate['<%= name %>'].messages.length>0" class="help-block">

        <p class="text-{{validation.type}}" ng-show="validation.visible!==false || <%= model %>.form.intent===true"
           ng-repeat="(key,validation) in <%= model %>.validate['<%= name %>'].messages track by key">
               <i class="{{validation.icon}}"></i> {{validation.message}}
        </p>
    </span>
</div>

<script>

    <%= model %>.triggers.table.after.control("<%= nameclean %>");



    <% if(options.maxlength){ %>
    //$('[name="<%= model %>_<%= nameclean %>"]').maxlength();
    <% } %>
    $('[name="<%= model %>_<%= nameclean %>"]').keyup(function (e) {
        var code = e.which;
        if (code == 13) {
            $(this).trigger("blur");
            $("[role='button']").click();
        }
    });
    <% if(!options.normal){ %>
    $('[name="<%= model %>_<%= nameclean %>"]').trigger("change");
    <% }else{ %>
    setTimeout(function () {
        TurnPassword<%= model %>_<%= nameclean %>();
    }, 100);

    <% } %>
    $('[name="<%= model %>_<%= nameclean %>"]').blur(function () {
        STEP.register({
            scope: "<%= model %>",
            action: "Change Password",
            field: "<%= name %>",
            value: <%= model %>.<%= name %>
    })
        ;

    });
    var isReadProgram = <%= model %>.form.isReadOnly('<%= name %>');
    if (isReadProgram !== false) {
        <%= model %>.
        form.options.<%= name %>.disabled = true;
        if (isReadProgram !== undefined) {
            <%= model %>.<%= name %> = isReadProgram;

            if (<%= model %>.
            form.options.<%= name %>.isNumber
        )
            {
                $me = isReadProgram;
                $me = $me.replace(/\./g, 'POINT').replace(/\W/g, '').replace(/POINT/g, '.').replace(/[a-z]/gi, '');
                <%= model %>.
                <%= name %>_DragonClean = $me;
            }
            $('[name="<%= model %>_<%= nameclean %>"]').val(isReadProgram);
        }
    }
</script>