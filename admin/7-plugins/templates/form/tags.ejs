<%
if (DATA.name !== undefined) {
    var name, model, opts;
    name = DATA.name;
    model = DATA.model;
    opts = DATA.opts;
}
var name = name || "";
var options = {
    placeholder: params.capitalize(name),
    helptext: '',
    posttype: "text",
    autocomplete: [
        {value: 'angel'},
    ],
    maxtags: 100,
    disabled: false,
    allowDuplicates: false

};
options = OBJECT.merge(options, opts); var nameclean = name.replace(/\./g, '_');
var toclient = JSON.stringify(options);
%>
<script>
    <%= model %>.triggers.table.before.control("<%= nameclean %>");
    <%= model %>.form.registerField("<%= name %>", "<%= toclient %>");
    if (MESSAGE.exist('columns.<%= nameclean %>')) {
        <%= model %>.
        form.options.<%= name %>.placeholder = MESSAGE.ic('columns.<%= nameclean %>');
    }
</script>
<div class="form-group-material form-group has-feedback has-{{<%= model %>.validate['<%= name %>'].type || <%= model %>.defaultColor }}"
     id="input<%= model %>_<%= nameclean %>">
    <label
            class="control-label is-visible animate" style="color:#000000 !important;">
        {{::<%= model %>.form.options.<%= name %>.placeholder}}
        <% if(options.popover){ %>
            <i
                    id="popover<%= model %>_<%= nameclean %>" class="icon-help">
            </i>
        <% } %>
    </label>
    <input
            ng-model="<%= model + "." + name %>"
            name="<%= model %>_<%= nameclean %>"
            type="text"

            ng-disabled="<%= model %>.form.options.<%= name %>.disabled"
            placeholder="<%= options.placeholder %>"
            class="form-control border-<%= COLOR.secundary %>">


    <span ng-if="<%= model %>.form.options.<%= name %>.helptext!=''"
          class="help-block text-muted">
        {{<%= model %>.form.options.<%= name %>.helptext}}
    </span>

    <span ng-show="<%= model %>.validate['<%= name %>'].messages.length>0" class="help-block">
        <p class="text-{{validation.type}}" ng-show="validation.visible!==false || <%= model %>.form.intent===true"
           ng-repeat="(key,validation) in <%= model %>.validate['<%= name %>'].messages track by key">
               <i class="{{validation.icon}}"></i> {{validation.message}}
        </p>
    </span>
</div>
<script>
    $(document).ready(function () {
        <% if(options.popover){ %>
        $('#popover<%= model %>_<%= nameclean %>').popover({
            container: 'body',
            title: eval("`" +<%= model %>.form.options.<%= name %>.popover.title + "`"),
            content:eval("`" +<%= model %>.form.options.<%= name %>.popover.content + "`"),
        trigger: 'click'
    });
        <% } %>
        var engine = new Bloodhound({
                local: <%= model %>.form.options.<%= name %>.autocomplete,
            datumTokenizer
    :

        function (d) {
            return Bloodhound.tokenizers.whitespace(d.value);
        }

    ,
        queryTokenizer: Bloodhound.tokenizers.whitespace
    })
        ;
        engine.initialize();
        // Initialize tokenfield
        <!--$('[name="<%= model %>_<%= nameclean %>"]').tokenfield({-->
        <!--typeahead: [null, {-->
        <!--displayKey: 'value',-->
        <!--source: engine.ttAdapter()-->
        <!--}]-->
        <!--});-->
        var isReadProgram = <%= model %>.
        form.isReadOnly('<%= name %>');
        if (isReadProgram !== false) {
            <%= model %>.
            form.options.<%= name %>.disabled = true;
            if (isReadProgram !== undefined) {
                <%= model %>.<%= name %> = isReadProgram;
                $('[name="<%= model %>_<%= nameclean %>"]').val(isReadProgram);
            }
        }

        $('[name="<%= model %>_<%= nameclean %>"]').tagsinput({
                maxTags: <%= model %>.form.options.<%= name %>.maxtags,
            allowDuplicates
    : <%= model %>.
        form.options.<%= name %>.allowDuplicates,
            tagClass
    :

        function (item) {
            return 'label bg-' + COLOR.secundary;
        }

    ,
        typeahead: [null, {
            displayKey: 'value',
            source: engine.ttAdapter()
        }]
    })
        ;

        <%= model %>.
        triggers.table.after.control("<%= nameclean %>");

        $('[name="<%= model %>_<%= nameclean %>"]').blur(function () {
            STEP.register({
                scope: "<%= model %>",
                action: "Change Tag",
                field: "<%= name %>",
                value: <%= model %>.<%= name %>
        })
            ;

        });
        $(".bootstrap-tagsinput").addClass('alpha-' + COLOR.secundary);
    });
</script>