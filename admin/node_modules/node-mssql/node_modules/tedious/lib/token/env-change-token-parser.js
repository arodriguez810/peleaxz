var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.10.0
var types;

types = {
  1: {
    name: 'DATABASE',
    event: 'databaseChange'
  },
  2: {
    name: 'LANGUAGE',
    event: 'languageChange'
  },
  3: {
    name: 'CHARSET',
    event: 'charsetChange'
  },
  4: {
    name: 'PACKET_SIZE',
    event: 'packetSizeChange'
  },
  7: {
    name: 'SQL_COLLATION',
    event: 'sqlCollationChange'
  },
  8: {
    name: 'BEGIN_TXN',
    event: 'beginTransaction'
  },
  9: {
    name: 'COMMIT_TXN',
    event: 'commitTransaction'
  },
  10: {
    name: 'ROLLBACK_TXN',
    event: 'rollbackTransaction'
  },
  13: {
    name: 'DATABASE_MIRRORING_PARTNER',
    event: 'partnerNode'
  },
  17: {
    name: 'TXN_ENDED'
  },
  18: {
    name: 'RESET_CONNECTION',
    event: 'resetConnection'
  },
  20: {
    name: 'ROUTING_CHANGE',
    event: 'routingChange'
  }
};

module.exports = _regeneratorRuntime.mark(function callee$0$0(parser) {
  var length, newValue, oldValue, port, protocol, routePacket, server, serverLen, type, typeNumber, valueLength;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readUInt16LE();

      case 2:
        length = context$1$0.sent;
        context$1$0.next = 5;
        return parser.readUInt8();

      case 5:
        typeNumber = context$1$0.sent;

        type = types[typeNumber];

        if (!type) {
          context$1$0.next = 48;
          break;
        }

        context$1$0.t0 = type.name;
        context$1$0.next = context$1$0.t0 === 'DATABASE' ? 11 : context$1$0.t0 === 'LANGUAGE' ? 11 : context$1$0.t0 === 'CHARSET' ? 11 : context$1$0.t0 === 'PACKET_SIZE' ? 11 : context$1$0.t0 === 'DATABASE_MIRRORING_PARTNER' ? 11 : context$1$0.t0 === 'SQL_COLLATION' ? 16 : context$1$0.t0 === 'BEGIN_TXN' ? 16 : context$1$0.t0 === 'COMMIT_TXN' ? 16 : context$1$0.t0 === 'ROLLBACK_TXN' ? 16 : context$1$0.t0 === 'RESET_CONNECTION' ? 16 : context$1$0.t0 === 'ROUTING_CHANGE' ? 21 : 41;
        break;

      case 11:
        return context$1$0.delegateYield(parser.readBVarChar(), 't1', 12);

      case 12:
        newValue = context$1$0.t1;
        return context$1$0.delegateYield(parser.readBVarChar(), 't2', 14);

      case 14:
        oldValue = context$1$0.t2;
        return context$1$0.abrupt('break', 45);

      case 16:
        return context$1$0.delegateYield(parser.readBVarByte(), 't3', 17);

      case 17:
        newValue = context$1$0.t3;
        return context$1$0.delegateYield(parser.readBVarByte(), 't4', 19);

      case 19:
        oldValue = context$1$0.t4;
        return context$1$0.abrupt('break', 45);

      case 21:
        context$1$0.next = 23;
        return parser.readUInt16LE();

      case 23:
        valueLength = context$1$0.sent;
        context$1$0.next = 26;
        return parser.readBuffer(valueLength);

      case 26:
        routePacket = context$1$0.sent;

        protocol = routePacket.readUInt8(0);

        if (!(protocol !== 0)) {
          context$1$0.next = 30;
          break;
        }

        throw new Error('Unknown protocol byte in routing change event');

      case 30:
        port = routePacket.readUInt16LE(1);
        serverLen = routePacket.readUInt16LE(3);
        server = routePacket.toString('ucs2', 5, 5 + serverLen * 2);
        newValue = {
          protocol: protocol,
          port: port,
          server: server
        };
        context$1$0.next = 36;
        return parser.readUInt16LE();

      case 36:
        valueLength = context$1$0.sent;
        context$1$0.next = 39;
        return parser.readBuffer(valueLength);

      case 39:
        oldValue = context$1$0.sent;
        return context$1$0.abrupt('break', 45);

      case 41:
        console.error("Tedious > Unsupported ENVCHANGE type " + typeNumber);
        context$1$0.next = 44;
        return parser.readBuffer(length - 1);

      case 44:
        return context$1$0.abrupt('return');

      case 45:
        if (type.name === 'PACKET_SIZE') {
          newValue = parseInt(newValue);
          oldValue = parseInt(oldValue);
        }
        context$1$0.next = 52;
        break;

      case 48:
        console.error("Tedious > Unsupported ENVCHANGE type " + typeNumber);
        context$1$0.next = 51;
        return parser.readBuffer(length - 1);

      case 51:
        return context$1$0.abrupt('return');

      case 52:
        return context$1$0.abrupt('return', {
          name: 'ENVCHANGE',
          type: type.name,
          event: type.event,
          oldValue: oldValue,
          newValue: newValue
        });

      case 53:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});