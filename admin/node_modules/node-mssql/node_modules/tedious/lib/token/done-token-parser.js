var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.10.0
var STATUS, doneInProcParser, doneParser, doneProcParser, parseToken;

STATUS = {
  MORE: 0x0001,
  ERROR: 0x0002,
  INXACT: 0x0004,
  COUNT: 0x0010,
  ATTN: 0x0020,
  SRVERROR: 0x0100
};

parseToken = _regeneratorRuntime.mark(function callee$0$0(parser, options) {
  var attention, curCmd, inTxn, more, rowCount, rowCountValid, serverError, sqlError, status, token;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readUInt16LE();

      case 2:
        status = context$1$0.sent;

        more = !!(status & STATUS.MORE);
        sqlError = !!(status & STATUS.ERROR);
        inTxn = !!(status & STATUS.INXACT);
        rowCountValid = !!(status & STATUS.COUNT);
        attention = !!(status & STATUS.ATTN);
        serverError = !!(status & STATUS.SRVERROR);
        context$1$0.next = 11;
        return parser.readUInt16LE();

      case 11:
        curCmd = context$1$0.sent;

        if (!(options.tdsVersion < "7_2")) {
          context$1$0.next = 18;
          break;
        }

        context$1$0.next = 15;
        return parser.readUInt32LE();

      case 15:
        rowCount = context$1$0.sent;
        context$1$0.next = 21;
        break;

      case 18:
        context$1$0.next = 20;
        return parser.readUInt64LE();

      case 20:
        rowCount = context$1$0.sent;

      case 21:
        if (!rowCountValid) {
          rowCount = void 0;
        }
        return context$1$0.abrupt('return', token = {
          name: 'DONE',
          event: 'done',
          more: more,
          sqlError: sqlError,
          attention: attention,
          serverError: serverError,
          rowCount: rowCount,
          curCmd: curCmd
        });

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

doneParser = _regeneratorRuntime.mark(function callee$0$0(parser, colMetadata, options) {
  var token;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parseToken(parser, options), 't0', 1);

      case 1:
        token = context$1$0.t0;

        token.name = 'DONE';
        token.event = 'done';
        return context$1$0.abrupt('return', token);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

doneInProcParser = _regeneratorRuntime.mark(function callee$0$0(parser, colMetadata, options) {
  var token;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parseToken(parser, options), 't0', 1);

      case 1:
        token = context$1$0.t0;

        token.name = 'DONEINPROC';
        token.event = 'doneInProc';
        return context$1$0.abrupt('return', token);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

doneProcParser = _regeneratorRuntime.mark(function callee$0$0(parser, colMetadata, options) {
  var token;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parseToken(parser, options), 't0', 1);

      case 1:
        token = context$1$0.t0;

        token.name = 'DONEPROC';
        token.event = 'doneProc';
        return context$1$0.abrupt('return', token);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

exports.doneParser = doneParser;

exports.doneInProcParser = doneInProcParser;

exports.doneProcParser = doneProcParser;