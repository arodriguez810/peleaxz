var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.10.0
var Parser,
    StreamParser,
    TYPE,
    tokenParsers,
    extend = function (child, parent) {
  for (var key in parent) {
    if (hasProp.call(parent, key)) child[key] = parent[key];
  }function ctor() {
    this.constructor = child;
  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    hasProp = ({}).hasOwnProperty;

StreamParser = require("../stream-parser");

TYPE = require('./token').TYPE;

tokenParsers = {};

tokenParsers[TYPE.COLMETADATA] = require('./colmetadata-token-parser');

tokenParsers[TYPE.DONE] = require('./done-token-parser').doneParser;

tokenParsers[TYPE.DONEINPROC] = require('./done-token-parser').doneInProcParser;

tokenParsers[TYPE.DONEPROC] = require('./done-token-parser').doneProcParser;

tokenParsers[TYPE.ENVCHANGE] = require('./env-change-token-parser');

tokenParsers[TYPE.ERROR] = require('./infoerror-token-parser').errorParser;

tokenParsers[TYPE.INFO] = require('./infoerror-token-parser').infoParser;

tokenParsers[TYPE.LOGINACK] = require('./loginack-token-parser');

tokenParsers[TYPE.ORDER] = require('./order-token-parser');

tokenParsers[TYPE.RETURNSTATUS] = require('./returnstatus-token-parser');

tokenParsers[TYPE.RETURNVALUE] = require('./returnvalue-token-parser');

tokenParsers[TYPE.ROW] = require('./row-token-parser');

tokenParsers[TYPE.NBCROW] = require('./nbcrow-token-parser');

tokenParsers[TYPE.SSPI] = require('./sspi-token-parser');

module.exports = Parser = (function (superClass) {
  extend(Parser, superClass);

  function Parser(debug, colMetadata, options) {
    this.debug = debug;
    this.colMetadata = colMetadata;
    this.options = options;
    Parser.__super__.constructor.call(this);
  }

  Parser.prototype.parser = _regeneratorRuntime.mark(function callee$1$0() {
    var token, type;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!true) {
            context$2$0.next = 13;
            break;
          }

          context$2$0.next = 3;
          return this.readUInt8();

        case 3:
          type = context$2$0.sent;

          if (!tokenParsers[type]) {
            context$2$0.next = 10;
            break;
          }

          return context$2$0.delegateYield(tokenParsers[type](this, this.colMetadata, this.options), 't0', 6);

        case 6:
          token = context$2$0.t0;

          if (token) {
            switch (token.name) {
              case 'COLMETADATA':
                this.colMetadata = token.columns;
            }
            this.push(token);
          }
          context$2$0.next = 11;
          break;

        case 10:
          throw new Error("Token type " + type + " not implemented");

        case 11:
          context$2$0.next = 0;
          break;

        case 13:
          return context$2$0.abrupt('return', void 0);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  Parser.prototype.readBVarChar = _regeneratorRuntime.mark(function callee$1$0(name) {
    var data, length;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return this.readUInt8();

        case 2:
          length = context$2$0.sent;
          context$2$0.next = 5;
          return this.readBuffer(length * 2);

        case 5:
          data = context$2$0.sent;
          return context$2$0.abrupt('return', data.toString("ucs2"));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  Parser.prototype.readUsVarChar = _regeneratorRuntime.mark(function callee$1$0(name) {
    var data, length;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return this.readUInt16LE();

        case 2:
          length = context$2$0.sent;
          context$2$0.next = 5;
          return this.readBuffer(length * 2);

        case 5:
          data = context$2$0.sent;
          return context$2$0.abrupt('return', data.toString("ucs2"));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  Parser.prototype.readBVarByte = _regeneratorRuntime.mark(function callee$1$0(name) {
    var length;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return this.readUInt8();

        case 2:
          length = context$2$0.sent;
          context$2$0.next = 5;
          return this.readBuffer(length);

        case 5:
          return context$2$0.abrupt('return', context$2$0.sent);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  Parser.prototype.readUsVarByte = _regeneratorRuntime.mark(function callee$1$0(name) {
    var length;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return this.readUInt16LE();

        case 2:
          length = context$2$0.sent;
          context$2$0.next = 5;
          return this.readBuffer(length);

        case 5:
          return context$2$0.abrupt('return', context$2$0.sent);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  Parser.prototype.readUInt24LE = _regeneratorRuntime.mark(function callee$1$0(name) {
    var high, low;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return this.readUInt16LE();

        case 2:
          low = context$2$0.sent;
          context$2$0.next = 5;
          return this.readUInt8();

        case 5:
          high = context$2$0.sent;
          return context$2$0.abrupt('return', low | high << 16);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  Parser.prototype.readUInt40LE = _regeneratorRuntime.mark(function callee$1$0(name) {
    var high, low;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return this.readUInt32LE();

        case 2:
          low = context$2$0.sent;
          context$2$0.next = 5;
          return this.readUInt8();

        case 5:
          high = context$2$0.sent;
          return context$2$0.abrupt('return', 0x100000000 * high + low);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  Parser.prototype.readUNumeric64LE = _regeneratorRuntime.mark(function callee$1$0(name) {
    var high, low;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return this.readUInt32LE();

        case 2:
          low = context$2$0.sent;
          context$2$0.next = 5;
          return this.readUInt32LE();

        case 5:
          high = context$2$0.sent;
          return context$2$0.abrupt('return', 0x100000000 * high + low);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  Parser.prototype.readUNumeric96LE = _regeneratorRuntime.mark(function callee$1$0(name) {
    var dword1, dword2, dword3;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return this.readUInt32LE();

        case 2:
          dword1 = context$2$0.sent;
          context$2$0.next = 5;
          return this.readUInt32LE();

        case 5:
          dword2 = context$2$0.sent;
          context$2$0.next = 8;
          return this.readUInt32LE();

        case 8:
          dword3 = context$2$0.sent;
          return context$2$0.abrupt('return', dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3);

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  Parser.prototype.readUNumeric128LE = _regeneratorRuntime.mark(function callee$1$0(name) {
    var dword1, dword2, dword3, dword4;
    return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return this.readUInt32LE();

        case 2:
          dword1 = context$2$0.sent;
          context$2$0.next = 5;
          return this.readUInt32LE();

        case 5:
          dword2 = context$2$0.sent;
          context$2$0.next = 8;
          return this.readUInt32LE();

        case 8:
          dword3 = context$2$0.sent;
          context$2$0.next = 11;
          return this.readUInt32LE();

        case 11:
          dword4 = context$2$0.sent;
          return context$2$0.abrupt('return', dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3 + 0x100000000 * 0x100000000 * 0x100000000 * dword4);

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, callee$1$0, this);
  });

  return Parser;
})(StreamParser);