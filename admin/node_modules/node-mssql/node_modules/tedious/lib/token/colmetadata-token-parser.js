var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.10.0
var metadataParse;

metadataParse = require('../metadata-parser');

module.exports = _regeneratorRuntime.mark(function callee$0$0(parser, colMetadata, options) {
  var c, colName, columnCount, columns, i, metadata, numberOfTableNameParts, part, ref, tableName;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readUInt16LE();

      case 2:
        columnCount = context$1$0.sent;

        columns = [];
        c = i = 0, ref = columnCount;

      case 5:
        if (!(0 <= ref ? i < ref : i > ref)) {
          context$1$0.next = 29;
          break;
        }

        return context$1$0.delegateYield(metadataParse(parser, options), 't0', 7);

      case 7:
        metadata = context$1$0.t0;

        if (!metadata.type.hasTableName) {
          context$1$0.next = 21;
          break;
        }

        if (!(options.tdsVersion >= '7_2')) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.next = 12;
        return parser.readUInt8();

      case 12:
        numberOfTableNameParts = context$1$0.sent;
        return context$1$0.delegateYield(_regeneratorRuntime.mark(function callee$1$0() {
          var j, ref1, results;
          return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                results = [];
                part = j = 1, ref1 = numberOfTableNameParts;

              case 2:
                if (!(1 <= ref1 ? j <= ref1 : j >= ref1)) {
                  context$2$0.next = 10;
                  break;
                }

                context$2$0.t0 = results;
                return context$2$0.delegateYield(parser.readUsVarChar(), 't1', 5);

              case 5:
                context$2$0.t2 = context$2$0.t1;
                context$2$0.t0.push.call(context$2$0.t0, context$2$0.t2);

              case 7:
                part = 1 <= ref1 ? ++j : --j;
                context$2$0.next = 2;
                break;

              case 10:
                return context$2$0.abrupt('return', results);

              case 11:
              case 'end':
                return context$2$0.stop();
            }
          }, callee$1$0, this);
        })(), 't1', 14);

      case 14:
        tableName = context$1$0.t1;
        context$1$0.next = 19;
        break;

      case 17:
        return context$1$0.delegateYield(parser.readUsVarChar(), 't2', 18);

      case 18:
        tableName = context$1$0.t2;

      case 19:
        context$1$0.next = 22;
        break;

      case 21:
        tableName = void 0;

      case 22:
        return context$1$0.delegateYield(parser.readBVarChar(), 't3', 23);

      case 23:
        colName = context$1$0.t3;

        if (options.columnNameReplacer) {
          colName = options.columnNameReplacer(colName, c, metadata);
        } else if (options.camelCaseColumns) {
          colName = colName.replace(/^[A-Z]/, function (s) {
            return s.toLowerCase();
          });
        }
        columns.push({
          userType: metadata.userType,
          flags: metadata.flags,
          type: metadata.type,
          colName: colName,
          collation: metadata.collation,
          precision: metadata.precision,
          scale: metadata.scale,
          udtInfo: metadata.udtInfo,
          dataLength: metadata.dataLength,
          tableName: tableName
        });

      case 26:
        c = 0 <= ref ? ++i : --i;
        context$1$0.next = 5;
        break;

      case 29:
        return context$1$0.abrupt('return', {
          name: 'COLMETADATA',
          event: 'columnMetadata',
          columns: columns
        });

      case 30:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});