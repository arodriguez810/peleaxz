var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.10.0
var sprintf, valueParse;

valueParse = require('../value-parser');

sprintf = require('sprintf').sprintf;

module.exports = _regeneratorRuntime.mark(function callee$0$0(parser, columnsMetaData, options) {
  var bitmap, byte, bytes, column, columnMetaData, columns, i, index, j, k, l, len, len1, length, value;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        length = Math.ceil(columnsMetaData.length / 8);
        context$1$0.next = 3;
        return parser.readBuffer(length);

      case 3:
        bytes = context$1$0.sent;

        bitmap = [];
        for (j = 0, len = bytes.length; j < len; j++) {
          byte = bytes[j];
          for (i = k = 0; k <= 7; i = ++k) {
            bitmap.push(byte & 1 << i ? true : false);
          }
        }
        columns = options.useColumnNames ? {} : [];
        index = l = 0, len1 = columnsMetaData.length;

      case 8:
        if (!(l < len1)) {
          context$1$0.next = 21;
          break;
        }

        columnMetaData = columnsMetaData[index];

        if (!bitmap[index]) {
          context$1$0.next = 14;
          break;
        }

        value = null;
        context$1$0.next = 16;
        break;

      case 14:
        return context$1$0.delegateYield(valueParse(parser, columnMetaData, options), 't0', 15);

      case 15:
        value = context$1$0.t0;

      case 16:
        column = {
          value: value,
          metadata: columnMetaData
        };
        if (options.useColumnNames) {
          if (columns[columnMetaData.colName] == null) {
            columns[columnMetaData.colName] = column;
          }
        } else {
          columns.push(column);
        }

      case 18:
        index = ++l;
        context$1$0.next = 8;
        break;

      case 21:
        return context$1$0.abrupt('return', {
          name: 'NBCROW',
          event: 'row',
          columns: columns
        });

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});