var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.10.0
var parseChallenge;

parseChallenge = function (buffer) {
  var challenge;
  challenge = {};
  challenge.magic = buffer.slice(0, 8).toString("utf8");
  challenge.type = buffer.readInt32LE(8);
  challenge.domainLen = buffer.readInt16LE(12);
  challenge.domainMax = buffer.readInt16LE(14);
  challenge.domainOffset = buffer.readInt32LE(16);
  challenge.flags = buffer.readInt32LE(20);
  challenge.nonce = buffer.slice(24, 32);
  challenge.zeroes = buffer.slice(32, 40);
  challenge.targetLen = buffer.readInt16LE(40);
  challenge.targetMax = buffer.readInt16LE(42);
  challenge.targetOffset = buffer.readInt32LE(44);
  challenge.oddData = buffer.slice(48, 56);
  challenge.domain = buffer.slice(56, 56 + challenge.domainLen).toString('ucs2');
  challenge.target = buffer.slice(56 + challenge.domainLen, 56 + challenge.domainLen + challenge.targetLen);
  return challenge;
};

module.exports = _regeneratorRuntime.mark(function callee$0$0(parser) {
  var challenge, sspiBuffer;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parser.readUsVarByte(), 't0', 1);

      case 1:
        sspiBuffer = context$1$0.t0;

        challenge = parseChallenge(sspiBuffer);
        return context$1$0.abrupt('return', {
          name: 'SSPICHALLENGE',
          event: 'sspichallenge',
          ntlmpacket: challenge
        });

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});