var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.10.0
var errorParser, infoParser, parseToken;

parseToken = _regeneratorRuntime.mark(function callee$0$0(parser, options) {
  var clazz, length, lineNumber, message, number, procName, serverName, state, token;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readUInt16LE();

      case 2:
        length = context$1$0.sent;
        context$1$0.next = 5;
        return parser.readUInt32LE();

      case 5:
        number = context$1$0.sent;
        context$1$0.next = 8;
        return parser.readUInt8();

      case 8:
        state = context$1$0.sent;
        context$1$0.next = 11;
        return parser.readUInt8();

      case 11:
        clazz = context$1$0.sent;
        return context$1$0.delegateYield(parser.readUsVarChar(), 't0', 13);

      case 13:
        message = context$1$0.t0;
        return context$1$0.delegateYield(parser.readBVarChar(), 't1', 15);

      case 15:
        serverName = context$1$0.t1;
        return context$1$0.delegateYield(parser.readBVarChar(), 't2', 17);

      case 17:
        procName = context$1$0.t2;

        if (!(options.tdsVersion < '7_2')) {
          context$1$0.next = 24;
          break;
        }

        context$1$0.next = 21;
        return parser.readUInt16LE();

      case 21:
        lineNumber = context$1$0.sent;
        context$1$0.next = 27;
        break;

      case 24:
        context$1$0.next = 26;
        return parser.readUInt32LE();

      case 26:
        lineNumber = context$1$0.sent;

      case 27:
        return context$1$0.abrupt('return', token = {
          number: number,
          state: state,
          "class": clazz,
          message: message,
          serverName: serverName,
          procName: procName,
          lineNumber: lineNumber
        });

      case 28:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

infoParser = _regeneratorRuntime.mark(function callee$0$0(parser, colMetadata, options) {
  var token;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parseToken(parser, options), 't0', 1);

      case 1:
        token = context$1$0.t0;

        token.name = 'INFO';
        token.event = 'infoMessage';
        return context$1$0.abrupt('return', token);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

errorParser = _regeneratorRuntime.mark(function callee$0$0(parser, colMetadata, options) {
  var token;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parseToken(parser, options), 't0', 1);

      case 1:
        token = context$1$0.t0;

        token.name = 'ERROR';
        token.event = 'errorMessage';
        return context$1$0.abrupt('return', token);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

exports.infoParser = infoParser;

exports.errorParser = errorParser;