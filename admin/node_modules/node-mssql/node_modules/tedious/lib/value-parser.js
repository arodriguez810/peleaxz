var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.10.0
var DEFAULT_ENCODING, MAX, MONEY_DIVISOR, NULL, PLP_NULL, THREE_AND_A_THIRD, UNKNOWN_PLP_LEN, convertLEBytesToString, guidParser, iconv, readBinary, readChars, readDate, readDateTime, readDateTime2, readDateTimeOffset, readMax, readMaxBinary, readMaxChars, readMaxKnownLength, readMaxNChars, readMaxUnknownLength, readNChars, readSmallDateTime, readTime, sprintf;

iconv = require('iconv-lite');

sprintf = require('sprintf').sprintf;

guidParser = require('./guid-parser');

convertLEBytesToString = require('./tracking-buffer/bigint').convertLEBytesToString;

NULL = (1 << 16) - 1;

MAX = (1 << 16) - 1;

THREE_AND_A_THIRD = 3 + 1 / 3;

MONEY_DIVISOR = 10000;

PLP_NULL = new Buffer([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);

UNKNOWN_PLP_LEN = new Buffer([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);

DEFAULT_ENCODING = 'utf8';

module.exports = _regeneratorRuntime.mark(function callee$0$0(parser, metaData, options) {
  var codepage, data, dataLength, high, low, sign, textPointerLength, textPointerNull, type, value;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        value = void 0;
        dataLength = void 0;
        textPointerNull = void 0;
        type = metaData.type;

        if (!type.hasTextPointerAndTimestamp) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.next = 7;
        return parser.readUInt8();

      case 7:
        textPointerLength = context$1$0.sent;

        if (!(textPointerLength !== 0)) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 11;
        return parser.readBuffer(textPointerLength);

      case 11:
        context$1$0.next = 13;
        return parser.readBuffer(8);

      case 13:
        context$1$0.next = 17;
        break;

      case 15:
        dataLength = 0;
        textPointerNull = true;

      case 17:
        if (!(!dataLength && dataLength !== 0)) {
          context$1$0.next = 44;
          break;
        }

        context$1$0.t0 = type.id & 0x30;
        context$1$0.next = context$1$0.t0 === 0x10 ? 21 : context$1$0.t0 === 0x20 ? 23 : context$1$0.t0 === 0x30 ? 43 : 44;
        break;

      case 21:
        dataLength = 0;
        return context$1$0.abrupt('break', 44);

      case 23:
        if (!(metaData.dataLength !== MAX)) {
          context$1$0.next = 42;
          break;
        }

        context$1$0.t1 = type.dataLengthLength;
        context$1$0.next = context$1$0.t1 === 0 ? 27 : context$1$0.t1 === 1 ? 29 : context$1$0.t1 === 2 ? 33 : context$1$0.t1 === 4 ? 37 : 41;
        break;

      case 27:
        dataLength = void 0;
        return context$1$0.abrupt('break', 42);

      case 29:
        context$1$0.next = 31;
        return parser.readUInt8();

      case 31:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 42);

      case 33:
        context$1$0.next = 35;
        return parser.readUInt16LE();

      case 35:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 42);

      case 37:
        context$1$0.next = 39;
        return parser.readUInt32LE();

      case 39:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 42);

      case 41:
        throw Error("Unsupported dataLengthLength " + type.dataLengthLength + " for data type " + type.name);

      case 42:
        return context$1$0.abrupt('break', 44);

      case 43:
        dataLength = 1 << ((type.id & 0x0C) >> 2);

      case 44:
        context$1$0.t2 = type.name;
        context$1$0.next = context$1$0.t2 === 'Null' ? 47 : context$1$0.t2 === 'TinyInt' ? 49 : context$1$0.t2 === 'Int' ? 53 : context$1$0.t2 === 'SmallInt' ? 57 : context$1$0.t2 === 'BigInt' ? 61 : context$1$0.t2 === 'IntN' ? 66 : context$1$0.t2 === 'Real' ? 90 : context$1$0.t2 === 'Float' ? 94 : context$1$0.t2 === 'FloatN' ? 98 : context$1$0.t2 === 'Money' ? 113 : context$1$0.t2 === 'SmallMoney' ? 113 : context$1$0.t2 === 'MoneyN' ? 113 : context$1$0.t2 === 'Bit' ? 135 : context$1$0.t2 === 'BitN' ? 139 : context$1$0.t2 === 'VarChar' ? 148 : context$1$0.t2 === 'Char' ? 148 : context$1$0.t2 === 'NVarChar' ? 157 : context$1$0.t2 === 'NChar' ? 157 : context$1$0.t2 === 'VarBinary' ? 165 : context$1$0.t2 === 'Binary' ? 165 : context$1$0.t2 === 'Text' ? 173 : context$1$0.t2 === 'NText' ? 180 : context$1$0.t2 === 'Image' ? 187 : context$1$0.t2 === 'Xml' ? 194 : context$1$0.t2 === 'SmallDateTime' ? 197 : context$1$0.t2 === 'DateTime' ? 200 : context$1$0.t2 === 'DateTimeN' ? 203 : context$1$0.t2 === 'TimeN' ? 214 : context$1$0.t2 === 'DateN' ? 224 : context$1$0.t2 === 'DateTime2N' ? 234 : context$1$0.t2 === 'DateTimeOffsetN' ? 244 : context$1$0.t2 === 'NumericN' ? 254 : context$1$0.t2 === 'DecimalN' ? 254 : context$1$0.t2 === 'UniqueIdentifierN' ? 288 : context$1$0.t2 === 'UDT' ? 302 : 305;
        break;

      case 47:
        value = null;
        return context$1$0.abrupt('break', 307);

      case 49:
        context$1$0.next = 51;
        return parser.readUInt8();

      case 51:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 307);

      case 53:
        context$1$0.next = 55;
        return parser.readInt32LE();

      case 55:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 307);

      case 57:
        context$1$0.next = 59;
        return parser.readInt16LE();

      case 59:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 307);

      case 61:
        context$1$0.next = 63;
        return parser.readBuffer(8);

      case 63:
        context$1$0.t3 = context$1$0.sent;
        value = convertLEBytesToString(context$1$0.t3);
        return context$1$0.abrupt('break', 307);

      case 66:
        context$1$0.t4 = dataLength;
        context$1$0.next = context$1$0.t4 === 0 ? 69 : context$1$0.t4 === 1 ? 71 : context$1$0.t4 === 2 ? 75 : context$1$0.t4 === 4 ? 79 : context$1$0.t4 === 8 ? 83 : 88;
        break;

      case 69:
        value = null;
        return context$1$0.abrupt('break', 89);

      case 71:
        context$1$0.next = 73;
        return parser.readUInt8();

      case 73:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 89);

      case 75:
        context$1$0.next = 77;
        return parser.readInt16LE();

      case 77:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 89);

      case 79:
        context$1$0.next = 81;
        return parser.readInt32LE();

      case 81:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 89);

      case 83:
        context$1$0.next = 85;
        return parser.readBuffer(8);

      case 85:
        context$1$0.t5 = context$1$0.sent;
        value = convertLEBytesToString(context$1$0.t5);
        return context$1$0.abrupt('break', 89);

      case 88:
        throw new Error("Unsupported dataLength " + dataLength + " for IntN");

      case 89:
        return context$1$0.abrupt('break', 307);

      case 90:
        context$1$0.next = 92;
        return parser.readFloatLE();

      case 92:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 307);

      case 94:
        context$1$0.next = 96;
        return parser.readDoubleLE();

      case 96:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 307);

      case 98:
        context$1$0.t6 = dataLength;
        context$1$0.next = context$1$0.t6 === 0 ? 101 : context$1$0.t6 === 4 ? 103 : context$1$0.t6 === 8 ? 107 : 111;
        break;

      case 101:
        value = null;
        return context$1$0.abrupt('break', 112);

      case 103:
        context$1$0.next = 105;
        return parser.readFloatLE();

      case 105:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 112);

      case 107:
        context$1$0.next = 109;
        return parser.readDoubleLE();

      case 109:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 112);

      case 111:
        throw new Error("Unsupported dataLength " + dataLength + " for FloatN");

      case 112:
        return context$1$0.abrupt('break', 307);

      case 113:
        context$1$0.t7 = dataLength;
        context$1$0.next = context$1$0.t7 === 0 ? 116 : context$1$0.t7 === 4 ? 118 : context$1$0.t7 === 8 ? 124 : 133;
        break;

      case 116:
        value = null;
        return context$1$0.abrupt('break', 134);

      case 118:
        context$1$0.next = 120;
        return parser.readInt32LE();

      case 120:
        context$1$0.t8 = context$1$0.sent;
        context$1$0.t9 = MONEY_DIVISOR;
        value = context$1$0.t8 / context$1$0.t9;
        return context$1$0.abrupt('break', 134);

      case 124:
        context$1$0.next = 126;
        return parser.readInt32LE();

      case 126:
        high = context$1$0.sent;
        context$1$0.next = 129;
        return parser.readUInt32LE();

      case 129:
        low = context$1$0.sent;

        value = low + 0x100000000 * high;
        value /= MONEY_DIVISOR;
        return context$1$0.abrupt('break', 134);

      case 133:
        throw new Error("Unsupported dataLength " + dataLength + " for MoneyN");

      case 134:
        return context$1$0.abrupt('break', 307);

      case 135:
        context$1$0.next = 137;
        return parser.readUInt8();

      case 137:
        value = !!context$1$0.sent;
        return context$1$0.abrupt('break', 307);

      case 139:
        context$1$0.t10 = dataLength;
        context$1$0.next = context$1$0.t10 === 0 ? 142 : context$1$0.t10 === 1 ? 144 : 147;
        break;

      case 142:
        value = null;
        return context$1$0.abrupt('break', 147);

      case 144:
        context$1$0.next = 146;
        return parser.readUInt8();

      case 146:
        value = !!context$1$0.sent;

      case 147:
        return context$1$0.abrupt('break', 307);

      case 148:
        codepage = metaData.collation.codepage;

        if (!(metaData.dataLength === MAX)) {
          context$1$0.next = 154;
          break;
        }

        return context$1$0.delegateYield(readMaxChars(parser, codepage), 't11', 151);

      case 151:
        value = context$1$0.t11;
        context$1$0.next = 156;
        break;

      case 154:
        return context$1$0.delegateYield(readChars(parser, dataLength, codepage), 't12', 155);

      case 155:
        value = context$1$0.t12;

      case 156:
        return context$1$0.abrupt('break', 307);

      case 157:
        if (!(metaData.dataLength === MAX)) {
          context$1$0.next = 162;
          break;
        }

        return context$1$0.delegateYield(readMaxNChars(parser), 't13', 159);

      case 159:
        value = context$1$0.t13;
        context$1$0.next = 164;
        break;

      case 162:
        return context$1$0.delegateYield(readNChars(parser, dataLength), 't14', 163);

      case 163:
        value = context$1$0.t14;

      case 164:
        return context$1$0.abrupt('break', 307);

      case 165:
        if (!(metaData.dataLength === MAX)) {
          context$1$0.next = 170;
          break;
        }

        return context$1$0.delegateYield(readMaxBinary(parser), 't15', 167);

      case 167:
        value = context$1$0.t15;
        context$1$0.next = 172;
        break;

      case 170:
        return context$1$0.delegateYield(readBinary(parser, dataLength), 't16', 171);

      case 171:
        value = context$1$0.t16;

      case 172:
        return context$1$0.abrupt('break', 307);

      case 173:
        if (!textPointerNull) {
          context$1$0.next = 177;
          break;
        }

        value = null;
        context$1$0.next = 179;
        break;

      case 177:
        return context$1$0.delegateYield(readChars(parser, dataLength, metaData.collation.codepage), 't17', 178);

      case 178:
        value = context$1$0.t17;

      case 179:
        return context$1$0.abrupt('break', 307);

      case 180:
        if (!textPointerNull) {
          context$1$0.next = 184;
          break;
        }

        value = null;
        context$1$0.next = 186;
        break;

      case 184:
        return context$1$0.delegateYield(readNChars(parser, dataLength), 't18', 185);

      case 185:
        value = context$1$0.t18;

      case 186:
        return context$1$0.abrupt('break', 307);

      case 187:
        if (!textPointerNull) {
          context$1$0.next = 191;
          break;
        }

        value = null;
        context$1$0.next = 193;
        break;

      case 191:
        return context$1$0.delegateYield(readBinary(parser, dataLength), 't19', 192);

      case 192:
        value = context$1$0.t19;

      case 193:
        return context$1$0.abrupt('break', 307);

      case 194:
        return context$1$0.delegateYield(readMaxNChars(parser), 't20', 195);

      case 195:
        value = context$1$0.t20;
        return context$1$0.abrupt('break', 307);

      case 197:
        return context$1$0.delegateYield(readSmallDateTime(parser, options.useUTC), 't21', 198);

      case 198:
        value = context$1$0.t21;
        return context$1$0.abrupt('break', 307);

      case 200:
        return context$1$0.delegateYield(readDateTime(parser, options.useUTC), 't22', 201);

      case 201:
        value = context$1$0.t22;
        return context$1$0.abrupt('break', 307);

      case 203:
        context$1$0.t23 = dataLength;
        context$1$0.next = context$1$0.t23 === 0 ? 206 : context$1$0.t23 === 4 ? 208 : context$1$0.t23 === 8 ? 211 : 213;
        break;

      case 206:
        value = null;
        return context$1$0.abrupt('break', 213);

      case 208:
        return context$1$0.delegateYield(readSmallDateTime(parser, options.useUTC), 't24', 209);

      case 209:
        value = context$1$0.t24;
        return context$1$0.abrupt('break', 213);

      case 211:
        return context$1$0.delegateYield(readDateTime(parser, options.useUTC), 't25', 212);

      case 212:
        value = context$1$0.t25;

      case 213:
        return context$1$0.abrupt('break', 307);

      case 214:
        context$1$0.next = 216;
        return parser.readUInt8();

      case 216:
        context$1$0.t26 = dataLength = context$1$0.sent;

        if (!(context$1$0.t26 === 0)) {
          context$1$0.next = 221;
          break;
        }

        value = null;
        context$1$0.next = 223;
        break;

      case 221:
        return context$1$0.delegateYield(readTime(parser, dataLength, metaData.scale, options.useUTC), 't27', 222);

      case 222:
        value = context$1$0.t27;

      case 223:
        return context$1$0.abrupt('break', 307);

      case 224:
        context$1$0.next = 226;
        return parser.readUInt8();

      case 226:
        context$1$0.t28 = dataLength = context$1$0.sent;

        if (!(context$1$0.t28 === 0)) {
          context$1$0.next = 231;
          break;
        }

        value = null;
        context$1$0.next = 233;
        break;

      case 231:
        return context$1$0.delegateYield(readDate(parser, options.useUTC), 't29', 232);

      case 232:
        value = context$1$0.t29;

      case 233:
        return context$1$0.abrupt('break', 307);

      case 234:
        context$1$0.next = 236;
        return parser.readUInt8();

      case 236:
        context$1$0.t30 = dataLength = context$1$0.sent;

        if (!(context$1$0.t30 === 0)) {
          context$1$0.next = 241;
          break;
        }

        value = null;
        context$1$0.next = 243;
        break;

      case 241:
        return context$1$0.delegateYield(readDateTime2(parser, dataLength, metaData.scale, options.useUTC), 't31', 242);

      case 242:
        value = context$1$0.t31;

      case 243:
        return context$1$0.abrupt('break', 307);

      case 244:
        context$1$0.next = 246;
        return parser.readUInt8();

      case 246:
        context$1$0.t32 = dataLength = context$1$0.sent;

        if (!(context$1$0.t32 === 0)) {
          context$1$0.next = 251;
          break;
        }

        value = null;
        context$1$0.next = 253;
        break;

      case 251:
        return context$1$0.delegateYield(readDateTimeOffset(parser, dataLength, metaData.scale), 't33', 252);

      case 252:
        value = context$1$0.t33;

      case 253:
        return context$1$0.abrupt('break', 307);

      case 254:
        if (!(dataLength === 0)) {
          context$1$0.next = 258;
          break;
        }

        value = null;
        context$1$0.next = 287;
        break;

      case 258:
        context$1$0.next = 260;
        return parser.readUInt8();

      case 260:
        context$1$0.t34 = context$1$0.sent;

        if (!(context$1$0.t34 === 1)) {
          context$1$0.next = 265;
          break;
        }

        context$1$0.t35 = 1;
        context$1$0.next = 266;
        break;

      case 265:
        context$1$0.t35 = -1;

      case 266:
        sign = context$1$0.t35;
        context$1$0.t36 = dataLength - 1;
        context$1$0.next = context$1$0.t36 === 4 ? 270 : context$1$0.t36 === 8 ? 274 : context$1$0.t36 === 12 ? 277 : context$1$0.t36 === 16 ? 280 : 283;
        break;

      case 270:
        context$1$0.next = 272;
        return parser.readUInt32LE();

      case 272:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 285);

      case 274:
        return context$1$0.delegateYield(parser.readUNumeric64LE(), 't37', 275);

      case 275:
        value = context$1$0.t37;
        return context$1$0.abrupt('break', 285);

      case 277:
        return context$1$0.delegateYield(parser.readUNumeric96LE(), 't38', 278);

      case 278:
        value = context$1$0.t38;
        return context$1$0.abrupt('break', 285);

      case 280:
        return context$1$0.delegateYield(parser.readUNumeric128LE(), 't39', 281);

      case 281:
        value = context$1$0.t39;
        return context$1$0.abrupt('break', 285);

      case 283:
        throw new Error(sprintf('Unsupported numeric size %d at offset 0x%04X', dataLength - 1, buffer.position));

      case 285:
        value *= sign;
        value /= Math.pow(10, metaData.scale);

      case 287:
        return context$1$0.abrupt('break', 307);

      case 288:
        context$1$0.t40 = dataLength;
        context$1$0.next = context$1$0.t40 === 0 ? 291 : context$1$0.t40 === 0x10 ? 293 : 300;
        break;

      case 291:
        value = null;
        return context$1$0.abrupt('break', 301);

      case 293:
        context$1$0.t41 = Buffer;
        context$1$0.next = 296;
        return parser.readBuffer(0x10);

      case 296:
        context$1$0.t42 = context$1$0.sent;
        data = new context$1$0.t41(context$1$0.t42);

        value = guidParser.arrayToGuid(data);
        return context$1$0.abrupt('break', 301);

      case 300:
        throw new Error(sprintf('Unsupported guid size %d at offset 0x%04X', dataLength - 1, buffer.position));

      case 301:
        return context$1$0.abrupt('break', 307);

      case 302:
        return context$1$0.delegateYield(readMaxBinary(parser), 't43', 303);

      case 303:
        value = context$1$0.t43;
        return context$1$0.abrupt('break', 307);

      case 305:
        throw new Error(sprintf('Unrecognised type %s at offset 0x%04X', type.name, buffer.position));

      case 307:
        return context$1$0.abrupt('return', value);

      case 308:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readBinary = _regeneratorRuntime.mark(function callee$0$0(parser, dataLength) {
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(dataLength === NULL)) {
          context$1$0.next = 4;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 4:
        context$1$0.next = 6;
        return parser.readBuffer(dataLength);

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readChars = _regeneratorRuntime.mark(function callee$0$0(parser, dataLength, codepage) {
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (codepage == null) {
          codepage = DEFAULT_ENCODING;
        }

        if (!(dataLength === NULL)) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 5:
        context$1$0.t0 = iconv;
        context$1$0.next = 8;
        return parser.readBuffer(dataLength);

      case 8:
        context$1$0.t1 = context$1$0.sent;
        context$1$0.t2 = codepage;
        return context$1$0.abrupt('return', context$1$0.t0.decode.call(context$1$0.t0, context$1$0.t1, context$1$0.t2));

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readNChars = _regeneratorRuntime.mark(function callee$0$0(parser, dataLength) {
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(dataLength === NULL)) {
          context$1$0.next = 4;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 4:
        context$1$0.next = 6;
        return parser.readBuffer(dataLength);

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent.toString("ucs2"));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readMaxBinary = _regeneratorRuntime.mark(function callee$0$0(parser) {
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(readMax(parser), 't0', 1);

      case 1:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readMaxChars = _regeneratorRuntime.mark(function callee$0$0(parser, codepage) {
  var data;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (codepage == null) {
          codepage = DEFAULT_ENCODING;
        }
        return context$1$0.delegateYield(readMax(parser), 't0', 2);

      case 2:
        if (!(data = context$1$0.t0)) {
          context$1$0.next = 6;
          break;
        }

        return context$1$0.abrupt('return', iconv.decode(data, codepage));

      case 6:
        return context$1$0.abrupt('return', null);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readMaxNChars = _regeneratorRuntime.mark(function callee$0$0(parser) {
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(readMax(parser), 't0', 1);

      case 1:
        return context$1$0.abrupt('return', context$1$0.t0.toString('ucs2'));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readMax = _regeneratorRuntime.mark(function callee$0$0(parser) {
  var expectedLength, high, low, type;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readBuffer(8);

      case 2:
        type = context$1$0.sent;

        if (!type.equals(PLP_NULL)) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 7:
        if (!type.equals(UNKNOWN_PLP_LEN)) {
          context$1$0.next = 12;
          break;
        }

        return context$1$0.delegateYield(readMaxUnknownLength(parser), 't0', 9);

      case 9:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 12:
        low = type.readUInt32LE(0);
        high = type.readUInt32LE(4);
        if (high >= 2 << 53 - 32) {
          console.warn("Read UInt64LE > 53 bits : high=" + high + ", low=" + low);
        }
        expectedLength = low + 0x100000000 * high;
        return context$1$0.delegateYield(readMaxKnownLength(parser, expectedLength), 't1', 17);

      case 17:
        return context$1$0.abrupt('return', context$1$0.t1);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readMaxKnownLength = _regeneratorRuntime.mark(function callee$0$0(parser, totalLength) {
  var chunkLength, data, offset;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        data = new Buffer(totalLength);
        offset = 0;

      case 2:
        context$1$0.next = 4;
        return parser.readUInt32LE();

      case 4:
        if (!(chunkLength = context$1$0.sent)) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 7;
        return parser.readBuffer(chunkLength);

      case 7:
        context$1$0.t0 = data;
        context$1$0.t1 = offset;
        context$1$0.sent.copy(context$1$0.t0, context$1$0.t1);

        offset += chunkLength;
        context$1$0.next = 2;
        break;

      case 13:
        if (!(offset !== totalLength)) {
          context$1$0.next = 15;
          break;
        }

        throw new Error("Partially Length-prefixed Bytes unmatched lengths : expected " + totalLength + ", but got " + offset + " bytes");

      case 15:
        return context$1$0.abrupt('return', data);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readMaxUnknownLength = _regeneratorRuntime.mark(function callee$0$0(parser) {
  var chunkLength, chunks, length;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        length = 0;
        chunks = [];

      case 2:
        context$1$0.next = 4;
        return parser.readUInt32LE();

      case 4:
        if (!(chunkLength = context$1$0.sent)) {
          context$1$0.next = 13;
          break;
        }

        length += chunkLength;
        context$1$0.t0 = chunks;
        context$1$0.next = 9;
        return parser.readBuffer(chunkLength);

      case 9:
        context$1$0.t1 = context$1$0.sent;
        context$1$0.t0.push.call(context$1$0.t0, context$1$0.t1);
        context$1$0.next = 2;
        break;

      case 13:
        return context$1$0.abrupt('return', Buffer.concat(chunks, length));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readSmallDateTime = _regeneratorRuntime.mark(function callee$0$0(parser, useUTC) {
  var days, minutes, value;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readUInt16LE();

      case 2:
        days = context$1$0.sent;
        context$1$0.next = 5;
        return parser.readUInt16LE();

      case 5:
        minutes = context$1$0.sent;

        if (useUTC) {
          value = new Date(Date.UTC(1900, 0, 1));
          value.setUTCDate(value.getUTCDate() + days);
          value.setUTCMinutes(value.getUTCMinutes() + minutes);
        } else {
          value = new Date(1900, 0, 1);
          value.setDate(value.getDate() + days);
          value.setMinutes(value.getMinutes() + minutes);
        }
        return context$1$0.abrupt('return', value);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readDateTime = _regeneratorRuntime.mark(function callee$0$0(parser, useUTC) {
  var days, milliseconds, threeHundredthsOfSecond, value;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return parser.readInt32LE();

      case 2:
        days = context$1$0.sent;
        context$1$0.next = 5;
        return parser.readUInt32LE();

      case 5:
        threeHundredthsOfSecond = context$1$0.sent;

        milliseconds = threeHundredthsOfSecond * THREE_AND_A_THIRD;
        if (useUTC) {
          value = new Date(Date.UTC(1900, 0, 1));
          value.setUTCDate(value.getUTCDate() + days);
          value.setUTCMilliseconds(value.getUTCMilliseconds() + milliseconds);
        } else {
          value = new Date(1900, 0, 1);
          value.setDate(value.getDate() + days);
          value.setMilliseconds(value.getMilliseconds() + milliseconds);
        }
        return context$1$0.abrupt('return', value);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readTime = _regeneratorRuntime.mark(function callee$0$0(parser, dataLength, scale, useUTC) {
  var date, i, j, ref, value;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.t0 = dataLength;
        context$1$0.next = context$1$0.t0 === 3 ? 3 : context$1$0.t0 === 4 ? 6 : context$1$0.t0 === 5 ? 10 : 12;
        break;

      case 3:
        return context$1$0.delegateYield(parser.readUInt24LE(), 't1', 4);

      case 4:
        value = context$1$0.t1;
        return context$1$0.abrupt('break', 12);

      case 6:
        context$1$0.next = 8;
        return parser.readUInt32LE();

      case 8:
        value = context$1$0.sent;
        return context$1$0.abrupt('break', 12);

      case 10:
        return context$1$0.delegateYield(parser.readUInt40LE(), 't2', 11);

      case 11:
        value = context$1$0.t2;

      case 12:
        if (scale < 7) {
          for (i = j = ref = scale + 1; ref <= 7 ? j <= 7 : j >= 7; i = ref <= 7 ? ++j : --j) {
            value *= 10;
          }
        }
        if (useUTC) {
          date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));
        } else {
          date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);
        }
        Object.defineProperty(date, "nanosecondsDelta", {
          enumerable: false,
          value: value % 10000 / Math.pow(10, 7)
        });
        return context$1$0.abrupt('return', date);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readDate = _regeneratorRuntime.mark(function callee$0$0(parser, useUTC) {
  var days;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(parser.readUInt24LE(), 't0', 1);

      case 1:
        days = context$1$0.t0;

        if (!useUTC) {
          context$1$0.next = 6;
          break;
        }

        return context$1$0.abrupt('return', new Date(Date.UTC(2000, 0, days - 730118)));

      case 6:
        return context$1$0.abrupt('return', new Date(2000, 0, days - 730118));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readDateTime2 = _regeneratorRuntime.mark(function callee$0$0(parser, dataLength, scale, useUTC) {
  var date, days, time;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(readTime(parser, dataLength - 3, scale, useUTC), 't0', 1);

      case 1:
        time = context$1$0.t0;
        return context$1$0.delegateYield(parser.readUInt24LE(), 't1', 3);

      case 3:
        days = context$1$0.t1;

        if (useUTC) {
          date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));
        } else {
          date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());
        }
        Object.defineProperty(date, "nanosecondsDelta", {
          enumerable: false,
          value: time.nanosecondsDelta
        });
        return context$1$0.abrupt('return', date);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});

readDateTimeOffset = _regeneratorRuntime.mark(function callee$0$0(parser, dataLength, scale) {
  var date, days, offset, time;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.delegateYield(readTime(parser, dataLength - 5, scale, true), 't0', 1);

      case 1:
        time = context$1$0.t0;
        return context$1$0.delegateYield(parser.readUInt24LE(), 't1', 3);

      case 3:
        days = context$1$0.t1;
        context$1$0.next = 6;
        return parser.readInt16LE();

      case 6:
        offset = context$1$0.sent;

        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));
        Object.defineProperty(date, "nanosecondsDelta", {
          enumerable: false,
          value: time.nanosecondsDelta
        });
        return context$1$0.abrupt('return', date);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});