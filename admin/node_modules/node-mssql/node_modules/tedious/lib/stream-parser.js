var _Object$keys = require('babel-runtime/core-js/object/keys').default;

// Generated by CoffeeScript 1.10.0
var BufferList,
    JOBS,
    Job,
    StreamParser,
    stream,
    extend = function (child, parent) {
  for (var key in parent) {
    if (hasProp.call(parent, key)) child[key] = parent[key];
  }function ctor() {
    this.constructor = child;
  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    hasProp = ({}).hasOwnProperty;

stream = require('readable-stream');

BufferList = require('bl');

Job = (function () {
  function Job(length1, execute) {
    this.length = length1;
    this.execute = execute;
  }

  return Job;
})();

JOBS = {
  'readInt8': new Job(1, function (buffer, offset) {
    return buffer.readInt8(offset);
  }),
  'readUInt8': new Job(1, function (buffer, offset) {
    return buffer.readUInt8(offset);
  }),
  'readInt16LE': new Job(2, function (buffer, offset) {
    return buffer.readInt16LE(offset);
  }),
  'readInt16BE': new Job(2, function (buffer, offset) {
    return buffer.readInt16BE(offset);
  }),
  'readUInt16LE': new Job(2, function (buffer, offset) {
    return buffer.readUInt16LE(offset);
  }),
  'readUInt16BE': new Job(2, function (buffer, offset) {
    return buffer.readUInt16BE(offset);
  }),
  'readInt32LE': new Job(4, function (buffer, offset) {
    return buffer.readInt32LE(offset);
  }),
  'readInt32BE': new Job(4, function (buffer, offset) {
    return buffer.readInt32BE(offset);
  }),
  'readUInt32LE': new Job(4, function (buffer, offset) {
    return buffer.readUInt32LE(offset);
  }),
  'readUInt32BE': new Job(4, function (buffer, offset) {
    return buffer.readUInt32BE(offset);
  }),
  'readInt64LE': new Job(8, function (buffer, offset) {
    return Math.pow(2, 32) * buffer.readInt32LE(offset + 4) + (buffer[offset + 4] & 0x80 === 0x80 ? 1 : -1) * buffer.readUInt32LE(offset);
  }),
  'readInt64BE': new Job(8, function (buffer, offset) {
    return Math.pow(2, 32) * buffer.readInt32BE(offset) + (buffer[offset] & 0x80 === 0x80 ? 1 : -1) * buffer.readUInt32BE(offset + 4);
  }),
  'readUInt64LE': new Job(8, function (buffer, offset) {
    return Math.pow(2, 32) * buffer.readUInt32LE(offset + 4) + buffer.readUInt32LE(offset);
  }),
  'readUInt64BE': new Job(8, function (buffer, offset) {
    return Math.pow(2, 32) * buffer.readUInt32BE(offset) + buffer.readUInt32BE(offset + 4);
  }),
  'readFloatLE': new Job(4, function (buffer, offset) {
    return buffer.readFloatLE(offset);
  }),
  'readFloatBE': new Job(4, function (buffer, offset) {
    return buffer.readFloatBE(offset);
  }),
  'readDoubleLE': new Job(8, function (buffer, offset) {
    return buffer.readDoubleLE(offset);
  }),
  'readDoubleBE': new Job(8, function (buffer, offset) {
    return buffer.readDoubleBE(offset);
  })
};

StreamParser = (function (superClass) {
  extend(StreamParser, superClass);

  function StreamParser(options) {
    options = options || {};
    if (options.objectMode == null) {
      options.objectMode = true;
    }
    StreamParser.__super__.constructor.call(this, options);
    this.buffer = new BufferList();
    this.generator = void 0;
    this.currentStep = void 0;
  }

  StreamParser.prototype.parser = function () {
    throw new Error('Not implemented');
  };

  StreamParser.prototype._transform = function (input, encoding, done) {
    var job, length, offset, result;
    offset = 0;
    this.buffer.append(input);
    if (!this.generator) {
      this.generator = this.parser();
      this.currentStep = this.generator.next();
    }
    job = void 0;
    result = void 0;
    length = void 0;
    while (!this.currentStep.done) {
      job = this.currentStep.value;
      if (!(job instanceof Job)) {
        return done(new Error('invalid job type'));
      }
      length = job.length;
      if (this.buffer.length - offset < length) {
        break;
      }
      result = job.execute(this.buffer, offset);
      offset += length;
      this.currentStep = this.generator.next(result);
    }
    this.buffer.consume(offset);
    if (this.currentStep.done) {
      this.push(null);
    }
    return done();
  };

  _Object$keys(JOBS).forEach(function (jobName) {
    return StreamParser.prototype[jobName] = function () {
      return JOBS[jobName];
    };
  });

  StreamParser.prototype.readBuffer = function (length) {
    return new Job(length, function (buffer, offset) {
      return buffer.slice(offset, offset + length);
    });
  };

  StreamParser.prototype.readString = function (length) {
    return new Job(length, function (buffer, offset) {
      return buffer.toString('utf8', offset, offset + length);
    });
  };

  StreamParser.prototype.skip = function (length) {
    return new Job(length, function (buffer, offset) {});
  };

  return StreamParser;
})(stream.Transform);

module.exports = StreamParser;