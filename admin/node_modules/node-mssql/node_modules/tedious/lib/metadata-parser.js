var _regeneratorRuntime = require('babel-runtime/regenerator').default;

// Generated by CoffeeScript 1.10.0
var TYPE, codepageByLcid, sprintf;

codepageByLcid = require('./collation').codepageByLcid;

TYPE = require('./data-type').TYPE;

sprintf = require('sprintf').sprintf;

module.exports = _regeneratorRuntime.mark(function callee$0$0(parser, options) {
  var collation, collationData, dataLength, flags, metadata, precision, scale, schema, schemaPresent, type, typeNumber, udtInfo, userType;
  return _regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(options.tdsVersion < "7_2")) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 3;
        return parser.readUInt16LE();

      case 3:
        userType = context$1$0.sent;
        context$1$0.next = 9;
        break;

      case 6:
        context$1$0.next = 8;
        return parser.readUInt32LE();

      case 8:
        userType = context$1$0.sent;

      case 9:
        context$1$0.next = 11;
        return parser.readUInt16LE();

      case 11:
        flags = context$1$0.sent;
        context$1$0.next = 14;
        return parser.readUInt8();

      case 14:
        typeNumber = context$1$0.sent;

        type = TYPE[typeNumber];

        if (type) {
          context$1$0.next = 18;
          break;
        }

        throw new Error(sprintf('Unrecognised data type 0x%02X', typeNumber));

      case 18:
        if (!((type.id & 0x30) === 0x20)) {
          context$1$0.next = 39;
          break;
        }

        context$1$0.t0 = type.dataLengthLength;
        context$1$0.next = context$1$0.t0 === 0 ? 22 : context$1$0.t0 === 1 ? 24 : context$1$0.t0 === 2 ? 28 : context$1$0.t0 === 4 ? 32 : 36;
        break;

      case 22:
        dataLength = void 0;
        return context$1$0.abrupt('break', 37);

      case 24:
        context$1$0.next = 26;
        return parser.readUInt8();

      case 26:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 37);

      case 28:
        context$1$0.next = 30;
        return parser.readUInt16LE();

      case 30:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 37);

      case 32:
        context$1$0.next = 34;
        return parser.readUInt32LE();

      case 34:
        dataLength = context$1$0.sent;
        return context$1$0.abrupt('break', 37);

      case 36:
        throw new Error("Unsupported dataLengthLength " + type.dataLengthLength + " for data type " + type.name);

      case 37:
        context$1$0.next = 40;
        break;

      case 39:
        dataLength = void 0;

      case 40:
        if (!type.hasPrecision) {
          context$1$0.next = 46;
          break;
        }

        context$1$0.next = 43;
        return parser.readUInt8();

      case 43:
        precision = context$1$0.sent;
        context$1$0.next = 47;
        break;

      case 46:
        precision = void 0;

      case 47:
        if (!type.hasScale) {
          context$1$0.next = 54;
          break;
        }

        context$1$0.next = 50;
        return parser.readUInt8();

      case 50:
        scale = context$1$0.sent;

        if (type.dataLengthFromScale) {
          dataLength = type.dataLengthFromScale(scale);
        }
        context$1$0.next = 55;
        break;

      case 54:
        scale = void 0;

      case 55:
        if (!type.hasCollation) {
          context$1$0.next = 70;
          break;
        }

        context$1$0.next = 58;
        return parser.readBuffer(5);

      case 58:
        collationData = context$1$0.sent;

        collation = {};
        collation.lcid = (collationData[2] & 0x0F) << 16;
        collation.lcid |= collationData[1] << 8;
        collation.lcid |= collationData[0];
        collation.codepage = codepageByLcid[collation.lcid];
        collation.flags = collationData[3] >> 4;
        collation.flags |= collationData[2] & 0xF0;
        collation.version = collationData[3] & 0x0F;
        collation.sortId = collationData[4];
        context$1$0.next = 71;
        break;

      case 70:
        collation = void 0;

      case 71:
        schema = void 0;

        if (!type.hasSchemaPresent) {
          context$1$0.next = 84;
          break;
        }

        context$1$0.next = 75;
        return parser.readUInt8();

      case 75:
        schemaPresent = context$1$0.sent;

        if (!(schemaPresent === 0x01)) {
          context$1$0.next = 84;
          break;
        }

        return context$1$0.delegateYield(parser.readBVarChar(), 't1', 78);

      case 78:
        context$1$0.t2 = context$1$0.t1;
        return context$1$0.delegateYield(parser.readBVarChar(), 't3', 80);

      case 80:
        context$1$0.t4 = context$1$0.t3;
        return context$1$0.delegateYield(parser.readUsVarChar(), 't5', 82);

      case 82:
        context$1$0.t6 = context$1$0.t5;
        schema = {
          dbname: context$1$0.t2,
          owningSchema: context$1$0.t4,
          xmlSchemaCollection: context$1$0.t6
        };

      case 84:
        udtInfo = void 0;

        if (!type.hasUDTInfo) {
          context$1$0.next = 98;
          break;
        }

        context$1$0.next = 88;
        return parser.readUInt16LE();

      case 88:
        context$1$0.t7 = context$1$0.sent;
        return context$1$0.delegateYield(parser.readBVarChar(), 't8', 90);

      case 90:
        context$1$0.t9 = context$1$0.t8;
        return context$1$0.delegateYield(parser.readBVarChar(), 't10', 92);

      case 92:
        context$1$0.t11 = context$1$0.t10;
        return context$1$0.delegateYield(parser.readBVarChar(), 't12', 94);

      case 94:
        context$1$0.t13 = context$1$0.t12;
        return context$1$0.delegateYield(parser.readUsVarChar(), 't14', 96);

      case 96:
        context$1$0.t15 = context$1$0.t14;
        udtInfo = {
          maxByteSize: context$1$0.t7,
          dbname: context$1$0.t9,
          owningSchema: context$1$0.t11,
          typeName: context$1$0.t13,
          assemblyName: context$1$0.t15
        };

      case 98:
        return context$1$0.abrupt('return', metadata = {
          userType: userType,
          flags: flags,
          type: type,
          collation: collation,
          precision: precision,
          scale: scale,
          dataLength: dataLength,
          schema: schema,
          udtInfo: udtInfo
        });

      case 99:
      case 'end':
        return context$1$0.stop();
    }
  }, callee$0$0, this);
});