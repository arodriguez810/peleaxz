{"version":3,"sources":["../source/readXlsx.js"],"names":["readXlsx","dropEmptyRows","dropEmptyColumns","namespaces","a","letters","contents","xml","options","sheet","properties","criticalError","values","parseValues","styles","parseStyles","parseProperties","getSheets","sheets","sheetId","getSheetId","createSheetNotFoundError","parseSheet","error","console","schema","data","dimensions","leftTop","rightBottom","cols","column","rows","row","cells","times","push","value","cell","map","rowMap","calculateDimensions","comparator","b","allRows","sort","allCols","minRow","maxRow","length","minCol","maxCol","n","action","i","colToInt","col","trim","split","indexOf","CellCoords","coords","parseInt","Cell","cellNode","getAttribute","select","textContent","undefined","parseFloat","style","numberFormat","id","dateFormat","template","smartDateParser","isDateTemplate","accessor","_","j","empty","splice","content","createDocument","node","strings","string","join","doc","baseStyles","parseCellStyle","numFmts","parseNumberFormatStyle","reduce","formats","format","xf","hasAttribute","xfId","numFmt","numberFormatId","book","workbookProperties","epoch1904","tokens","token","name","Object","keys","String","sheetNames","filter","names","sheetNamesText","Error"],"mappings":"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","file":"readXlsx.js","sourcesContent":["import parseDate from './parseDate'\r\n\r\nconst namespaces = {\r\n  a: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n}\r\n\r\n// Maps \"A1\"-like coordinates to `{ row, column }` numeric coordinates.\r\nconst letters = [\"\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\r\n\r\n/**\r\n * Reads an (unzipped) XLSX file structure into a 2D array of cells.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @param  {number?} options.sheet - Workbook sheet id (`1` by default).\r\n * @param  {string?} options.dateFormat - Date format, e.g. \"MM/DD/YY\". Values having this format template set will be parsed as dates.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @return {object} An object of shape `{ data, cells, properties }`. `data: string[][]` is an array of rows, each row being an array of cell values. `cells: string[][]` is an array of rows, each row being an array of cells. `properties: object` is the spreadsheet properties (e.g. whether date epoch is 1904 instead of 1900).\r\n */\r\nexport default function readXlsx(contents, xml, options = {}) {\r\n  // Deprecated 1.0.0 `sheet` argument. Will be removed in some next major release.\r\n  if (typeof options === 'string' || typeof options === 'number') {\r\n    options = { sheet: options }\r\n  } else if (!options.sheet) {\r\n    options = { ...options, sheet: 1 }\r\n  }\r\n\r\n  let sheet\r\n  let properties\r\n\r\n  // Error which will not be skipped.\r\n  let criticalError\r\n\r\n  try {\r\n    const values = parseValues(contents[`xl/sharedStrings.xml`], xml)\r\n    const styles = parseStyles(contents[`xl/styles.xml`], xml)\r\n    const properties = parseProperties(contents[`xl/workbook.xml`], xml)\r\n\r\n    // A hack for `getSheets()` method.\r\n    // https://github.com/catamphetamine/read-excel-file/issues/14\r\n    if (options.getSheets) {\r\n      return properties.sheets\r\n    }\r\n\r\n    // Parse sheet data.\r\n\r\n    const sheetId = typeof options.sheet === 'number' ? options.sheet : getSheetId(properties.sheets, options.sheet)\r\n\r\n    if (!sheetId || !contents[`xl/worksheets/sheet${sheetId}.xml`]) {\r\n      criticalError = createSheetNotFoundError(options.sheet, properties.sheets)\r\n      throw criticalError\r\n    }\r\n\r\n    sheet = parseSheet(contents[`xl/worksheets/sheet${sheetId}.xml`], xml, values, styles, properties, options)\r\n  }\r\n  catch (error) {\r\n    if (error === criticalError) {\r\n      throw error\r\n    }\r\n    // Guards against malformed XLSX files.\r\n    // Actually perhaps remove this in some next major version.\r\n    // So marking this `catch` \"Deprecated\".\r\n    console.error(error)\r\n    // A hack for `getSheets()` method.\r\n    // https://github.com/catamphetamine/read-excel-file/issues/14\r\n    if (options.getSheets) {\r\n      return {}\r\n    }\r\n    // Return sheet data.\r\n    if (options.schema) {\r\n      return {\r\n        data: [],\r\n        properties: {}\r\n      }\r\n    }\r\n    return []\r\n  }\r\n\r\n  const [ leftTop, rightBottom ] = sheet.dimensions\r\n\r\n  const cols = (rightBottom.column - leftTop.column) + 1\r\n  const rows = (rightBottom.row - leftTop.row) + 1\r\n\r\n  let cells = []\r\n\r\n  times(rows, () => {\r\n    const row = []\r\n    times(cols, () => row.push({ value: null }))\r\n    cells.push(row)\r\n  })\r\n\r\n  for (const cell of sheet.cells) {\r\n    const row = cell.row - leftTop.row\r\n    const column = cell.column - leftTop.column\r\n    if (cells[row]) {\r\n      cells[row][column] = cell\r\n    }\r\n  }\r\n\r\n  let data = cells.map(row => row.map(cell => cell.value))\r\n  data = dropEmptyRows(dropEmptyColumns(data), options.rowMap)\r\n\r\n  // cells = dropEmptyRows(dropEmptyColumns(cells, _ => _.value), options.rowMap, _ => _.value)\r\n\r\n  if (options.schema) {\r\n    return {\r\n      data,\r\n      properties\r\n    }\r\n  }\r\n\r\n  return data\r\n}\r\n\r\nfunction calculateDimensions (cells) {\r\n  const comparator = (a, b) => a - b\r\n  const allRows = cells.map(cell => cell.row).sort(comparator)\r\n  const allCols = cells.map(cell => cell.column).sort(comparator)\r\n  const minRow = allRows[0]\r\n  const maxRow = allRows[allRows.length - 1]\r\n  const minCol = allCols[0]\r\n  const maxCol = allCols[allCols.length - 1]\r\n\r\n  return [\r\n    { row: minRow, column: minCol },\r\n    { row: maxRow, column: maxCol }\r\n  ]\r\n}\r\n\r\nfunction times(n, action) {\r\n  let i = 0\r\n  while (i < n) {\r\n    action()\r\n    i++\r\n  }\r\n}\r\n\r\nfunction colToInt(col) {\r\n  col = col.trim().split('')\r\n\r\n  let n = 0;\r\n\r\n  for (let i = 0; i < col.length; i++) {\r\n    n *= 26\r\n    n += letters.indexOf(col[i])\r\n  }\r\n\r\n  return n\r\n}\r\n\r\nfunction CellCoords(coords) {\r\n  coords = coords.split(/(\\d+)/)\r\n  return {\r\n    row    : parseInt(coords[1]),\r\n    column : colToInt(coords[0])\r\n  }\r\n}\r\n\r\nfunction Cell(cellNode, sheet, xml, values, styles, properties, options) {\r\n  const coords = CellCoords(cellNode.getAttribute('r'))\r\n\r\n  let value = xml.select(sheet, cellNode, 'a:v', namespaces)[0]\r\n  // For `xpath` `value` can be `undefined` while for native `DOMParser` it's `null`.\r\n  value = value && value.textContent\r\n\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  switch (cellNode.getAttribute('t')) {\r\n    case 's':\r\n      value = values[parseInt(value)].trim()\r\n      if (value === '') {\r\n        value = undefined\r\n      }\r\n      break\r\n\r\n    case 'b':\r\n      value = value === '1' ? true : false\r\n      break\r\n\r\n    case 'n':\r\n    // Default type is \"n\".\r\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\r\n    default:\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      value = parseFloat(value)\r\n      // XLSX has no specific format for dates.\r\n      // Sometimes a date can be heuristically detected.\r\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\r\n      const style = styles[parseInt(cellNode.getAttribute('s') || 0)]\r\n      if ((style.numberFormat.id >= 14 && style.numberFormat.id <= 22) ||\r\n        (style.numberFormat.id >= 45 && style.numberFormat.id <= 47) ||\r\n        (options.dateFormat && style.numberFormat.template === options.dateFormat) ||\r\n        (options.smartDateParser !== false && style.numberFormat.template && isDateTemplate(style.numberFormat.template))) {\r\n        value = parseDate(value, properties)\r\n      }\r\n      break\r\n  }\r\n\r\n  // Convert empty values to `null`.\r\n  if (value === undefined) {\r\n    value = null\r\n  }\r\n\r\n  return {\r\n    row    : coords.row,\r\n    column : coords.column,\r\n    value\r\n  }\r\n}\r\n\r\nexport function dropEmptyRows(data, rowMap, accessor = _ => _) {\r\n  // Fill in row map.\r\n  if (rowMap) {\r\n    let j = 0\r\n    while (j < data.length) {\r\n      rowMap[j] = j\r\n      j++\r\n    }\r\n  }\r\n  // Drop empty rows.\r\n  let i = data.length - 1\r\n  while (i >= 0) {\r\n    // Check if the row is empty.\r\n    let empty = true\r\n    for (const cell of data[i]) {\r\n      if (accessor(cell) !== null) {\r\n        empty = false\r\n        break\r\n      }\r\n    }\r\n    // Remove the empty row.\r\n    if (empty) {\r\n      data.splice(i, 1)\r\n      if (rowMap) {\r\n        rowMap.splice(i, 1)\r\n      }\r\n    }\r\n    i--\r\n  }\r\n  return data\r\n}\r\n\r\nexport function dropEmptyColumns(data, accessor = _ => _) {\r\n  let i = data[0].length - 1\r\n  while (i >= 0) {\r\n    let empty = true\r\n    for (const row of data) {\r\n      if (accessor(row[i]) !== null) {\r\n        empty = false\r\n        break\r\n      }\r\n    }\r\n    if (empty) {\r\n      let j = 0;\r\n      while (j < data.length) {\r\n        data[j].splice(i, 1)\r\n        j++\r\n      }\r\n    }\r\n    i--\r\n  }\r\n  return data\r\n}\r\n\r\nfunction parseSheet(content, xml, values, styles, properties, options) {\r\n  const sheet = xml.createDocument(content)\r\n\r\n  const cells = xml.select(sheet, null, '/a:worksheet/a:sheetData/a:row/a:c', namespaces).map(node => Cell(node, sheet, xml, values, styles, properties, options))\r\n\r\n  let dimensions = xml.select(sheet, null, '//a:dimension/@ref', namespaces)[0]\r\n\r\n  if (dimensions) {\r\n    dimensions = dimensions.textContent.split(':').map(CellCoords)\r\n    // When there's only a single cell on a sheet\r\n    // there can sometimes be just \"A1\" for the dimensions string.\r\n    if (dimensions.length === 1) {\r\n      dimensions = [dimensions[0], dimensions[0]]\r\n    }\r\n  } else {\r\n    dimensions = calculateDimensions(cells)\r\n  }\r\n\r\n  return { cells, dimensions }\r\n}\r\n\r\nfunction parseValues(content, xml) {\r\n  const strings = xml.createDocument(content)\r\n  return xml.select(strings, null, '//a:si', namespaces)\r\n    .map(string => xml.select(strings, string, './/a:t[not(ancestor::a:rPh)]', namespaces).map(_ => _.textContent).join(''))\r\n}\r\n\r\n// http://officeopenxml.com/SSstyles.php\r\nfunction parseStyles(content, xml) {\r\n  if (!content) {\r\n    return {}\r\n  }\r\n  // https://social.msdn.microsoft.com/Forums/sqlserver/en-US/708978af-b598-45c4-a598-d3518a5a09f0/howwhen-is-cellstylexfs-vs-cellxfs-applied-to-a-cell?forum=os_binaryfile\r\n  // https://www.office-forums.com/threads/cellxfs-cellstylexfs.2163519/\r\n  const doc = xml.createDocument(content)\r\n  const baseStyles = xml.select(doc, null, '//a:styleSheet/a:cellStyleXfs/a:xf', namespaces).map(parseCellStyle);\r\n  const numFmts = xml.select(doc, null, '//a:styleSheet/a:numFmts/a:numFmt', namespaces)\r\n    .map(parseNumberFormatStyle)\r\n    .reduce((formats, format) => {\r\n      formats[format.id] = format\r\n      return formats\r\n    }, [])\r\n\r\n  return xml.select(doc, null, '//a:styleSheet/a:cellXfs/a:xf', namespaces).map((xf) => {\r\n    if (xf.hasAttribute('xfId')) {\r\n      return {\r\n        ...baseStyles[xf.xfId],\r\n        ...parseCellStyle(xf, numFmts)\r\n      }\r\n    }\r\n    return parseCellStyle(xf, numFmts)\r\n  })\r\n}\r\n\r\nfunction parseNumberFormatStyle(numFmt) {\r\n  return {\r\n    id: numFmt.getAttribute('numFmtId'),\r\n    template: numFmt.getAttribute('formatCode')\r\n  }\r\n}\r\n\r\n// http://www.datypic.com/sc/ooxml/e-ssml_xf-2.html\r\nfunction parseCellStyle(xf, numFmts) {\r\n  const style = {}\r\n  if (xf.hasAttribute('numFmtId')) {\r\n    const numberFormatId = xf.getAttribute('numFmtId')\r\n    if (numFmts[numberFormatId]) {\r\n      style.numberFormat = numFmts[numberFormatId]\r\n    } else {\r\n      style.numberFormat = { id: numberFormatId }\r\n    }\r\n  }\r\n  return style\r\n}\r\n\r\nfunction parseProperties(content, xml) {\r\n  if (!content) {\r\n    return {}\r\n  }\r\n  const book = xml.createDocument(content)\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/workbookPr.html\r\n  const workbookProperties = xml.select(book, null, '//a:workbookPr', namespaces)[0]\r\n  if (!workbookProperties) {\r\n    return {}\r\n  }\r\n  const properties = {};\r\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\r\n  if (workbookProperties.getAttribute('date1904') === '1') {\r\n    properties.epoch1904 = true\r\n  }\r\n  // Get sheet names (just because they're available).\r\n  for (const sheet of xml.select(book, null, '//a:sheets/a:sheet', namespaces)) {\r\n    if (sheet.getAttribute('name')) {\r\n      properties.sheets = properties.sheets || {}\r\n      properties.sheets[sheet.getAttribute('sheetId')] = sheet.getAttribute('name')\r\n    }\r\n  }\r\n  return properties;\r\n}\r\n\r\nfunction isDateTemplate(template) {\r\n  const tokens = template.split(/\\W+/)\r\n  for (const token of tokens) {\r\n    if (['MM', 'DD', 'YY', 'YYYY'].indexOf(token) < 0) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction getSheetId(sheets, name) {\r\n  if (!sheets) {\r\n    return\r\n  }\r\n  for (const sheetId of Object.keys(sheets)) {\r\n    if (sheets[sheetId] === name) {\r\n      return sheetId\r\n    }\r\n  }\r\n  // Deprecated.\r\n  // Legacy support for `sheet: '1'`, etc.\r\n  const id = parseInt(name, 10)\r\n  if (String(id) === name) {\r\n    return id\r\n  }\r\n}\r\n\r\nfunction createSheetNotFoundError(sheet, sheets) {\r\n  let sheetNames = {}\r\n  if (sheets) {\r\n    sheetNames = Object.keys(sheets)\r\n      .filter(id => sheets[id])\r\n      .reduce((names, id) => {\r\n        names[id] = sheets[id]\r\n        return names\r\n      }, {})\r\n  }\r\n  const sheetNamesText = Object.keys(sheetNames).map(id => `\"${sheetNames[id]}\" (#${id})`).join(', ')\r\n  return new Error(`Sheet ${typeof sheet === 'number' ? '#' + sheet : '\"' + sheet + '\"'} not found in *.xlsx file.${sheetNamesText ? ' Available sheets: ' + sheetNamesText + '.' : ''}`)\r\n}"]}