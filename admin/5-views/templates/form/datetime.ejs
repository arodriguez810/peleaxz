<%
var name = name || "";
var options = {
    placeholder: params.capitalize(name),
    icon: {
        class: "calendar",
        position: "left",
        color: TAG.table + "-800"
    },
    helptext: '',
    format: 'd/m/Y h:i',
    callformat: 'DD/MM/YYYY hh:mm a',
    posttype: "datetime",
    timepicker: true,
    datepicker: true,
    lang: 'en',
    inline: false,
    allowTimes: [],
    minTime: !1,
    minDate: !1,
    minDateTime: !1,
    maxTime: !1,
    maxDate: !1,
    maxDateTime: !1,
    mask: false,
    disabled: false,
    dynamic: false,
    verify: []
};
if (options.timepicker === false)
    options.posttype = 'date';
if (options.datepicker === false)
    options.posttype = 'time';
options = OBJECT.merge(options, opts); var nameclean = name.replace(/\./g,'_');
var toclient = JSON.stringify(options);
%>
<script>
    <%= model %>.form.schemas.select["<%= name %>"] =FORM.schemasType.datetime;
    <%= model %>.form.registerField("<%= name %>", "<%= toclient %>");
    <%= model %>.form.registerField("<%= name %>_DragonClean", "<%= toclient %>");



    if (MESSAGE.exist('columns.<%= nameclean %>')) {
        <%= model %>.
        form.options.<%= name %>.placeholder = MESSAGE.i('columns.<%= nameclean %>');
    }
    var isReadProgram = <%= model %>.form.isReadOnly('<%= name %>');
    if (isReadProgram !== false) {
        <%= model %>.
        form.options.<%= name %>.disabled = true;
        if (isReadProgram !== undefined) {
            <%= model %>.
            <%= name %>_DragonClean = isReadProgram;
            if (<%= model %>.
            form.options.<%= name %>.datepicker === false
        )
            {
                <%= model %>.<%= name %> = moment(new Date(isReadProgram)).format("hh:mm a");
            }
        else
            if (<%= model %>.
            form.options.<%= name %>.timepicker === false
        )
            {
                <%= model %>.<%= name %> = moment(new Date(isReadProgram)).format("DD/MM/YYYY");
            }
        else
            {
                <%= model %>.<%= name %> = moment(new Date(isReadProgram)).format("DD/MM/YYYY hh:mm a");
            }
        }
    }
</script>
<div class="form-group-material form-group has-feedback has-{{<%= model %>.validate['<%= name %>'].type || <%= model %>.defaultColor }}  has-feedback-{{<%= model %>.form.options.<%= name %>.icon.position}}"
     id="input<%= model %>_<%= nameclean %>">
    <label
            id="label<%= model %>_<%= nameclean %>"
            class="control-label {{<%= model + "." + name %>?'is-visible animate':''}}">
        {{<%= model %>.form.options.<%= name %>.placeholder}}
    </label>
    <input
            ng-model="<%= model + "." + name %>"
            id="<%= model %>_<%= nameclean %>"
            name="<%= model %>_<%= nameclean %>"
            type="text"
            ng-model-onblur
            class="form-control"
            ng-disabled="<%= model %>.form.options.<%= name %>.disabled"
            placeholder="{{<%= model %>.form.options.<%= name %>.placeholder}}"
    >

    <div style="margin: 10px;" class="form-control-feedback">
        <i class="icon-{{<%= model %>.form.options.<%= name %>.icon.class}} text-{{<%= model %>.validate['<%= name %>'].type || <%= model %>.defaultColor }}">

        </i>
    </div>
    <span ng-if="<%= model %>.form.options.<%= name %>.helptext!=''"
          class="help-block text-muted">
        {{<%= model %>.form.options.<%= name %>.helptext}}
    </span>

    <span ng-show="<%= model %>.validate['<%= name %>'].messages.length>0" class="help-block">
        <p class="text-{{validation.type}}"
           ng-repeat="(key,validation) in <%= model %>.validate['<%= name %>'].messages track by key">
               <i class="{{validation.icon}}"></i> {{validation.message}}
        </p>
    </span>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        var jsOptions = <%= model %>.
        form.options.<%= name %>;

        $.datetimepicker.setLocale(MESSAGE.current().code);

        $('#<%= model %>_<%= nameclean %>').datetimepicker({
            scrollMonth:false,
            scrollTime:false,
            scrollInput:false,
            format: '<%= options.format %>',
            timepicker: <%= options.timepicker %>,
            datepicker: <%= options.datepicker %>,
            inline: <%= options.inline %>,
            validateOnBlur: false,
            <%= options.allowTimes.length > 0 ? "allowTimes :" + JSON.stringify(options.allowTimes) + "," : "" %>
            minTime: jsOptions.dynamic ? $('#<%= model %>_' + jsOptions.minTime).val() : jsOptions.minTime,
            minDate: jsOptions.dynamic ? $('#<%= model %>_' + jsOptions.minDate).val() : jsOptions.minDate,
            minDateTime: jsOptions.dynamic ? $('#<%= model %>_' + jsOptions.minDateTime).val() : jsOptions.minDateTime,
            maxTime: jsOptions.dynamic ? $('#<%= model %>_' + jsOptions.maxTime).val() : jsOptions.maxTime,
            maxDate: jsOptions.dynamic ? $('#<%= model %>_' + jsOptions.maxDate).val() : jsOptions.maxDate,
            maxDateTime: jsOptions.dynamic ? $('#<%= model %>_' + jsOptions.maxDateTime).val() : jsOptions.maxDateTime,
            mask: <%= options.mask %>,
            onChangeDateTime: function (currentDateTime) {


                if (<%= model %>.
                form.options.<%= name %>.datepicker === false
            )
                {
                    <%= model %>.
                    <%= name %>_DragonClean = moment(currentDateTime).format("H:mm");
                }
            else
                if (<%= model %>.
                form.options.<%= name %>.timepicker === false
            )
                {
                    <%= model %>.
                    <%= name %>_DragonClean = moment(currentDateTime).format("YYYY-MM-DD");
                }
            else
                {
                    <%= model %>.
                    <%= name %>_DragonClean = moment(currentDateTime).format("YYYY-MM-DD H:mm a");
                }



                STEP.register({
                    scope: "<%= model %>",
                    action: "Change Date",
                    field: "<%= name %>",
                    value: <%= model %>.<%= name %>_DragonClean
            })
                ;

            },
            onShow: function (ct) {
                if (jsOptions.dynamic) {
                    if (jsOptions.minTime)
                        this.setOptions({minTime: eval(`<%= model %>.${jsOptions.minTime}_DragonClean`)});
                    if (jsOptions.minDate)
                        this.setOptions({minDate: eval(`<%= model %>.${jsOptions.minDate}_DragonClean`)});
                    if (jsOptions.minDateTime)
                        this.setOptions({minDateTime: eval(`<%= model %>.${jsOptions.minDateTime}_DragonClean`)});

                    if (jsOptions.maxTime)
                        this.setOptions({maxTime: eval(`<%= model %>.${jsOptions.maxTime}_DragonClean`)});
                    if (jsOptions.maxDate)
                        this.setOptions({maxDate: eval(`<%= model %>.${jsOptions.maxDate}_DragonClean`)});
                    if (jsOptions.maxDateTime)
                        this.setOptions({maxDateTime: eval(`<%= model %>.${jsOptions.maxDateTime}_DragonClean`)});

                }else{
                    if (jsOptions.minTime)
                        this.setOptions({minTime: jsOptions.minTime});
                    if (jsOptions.minDate)
                        this.setOptions({minDate: jsOptions.minDate});
                    if (jsOptions.minDateTime)
                        this.setOptions({minDateTime: jsOptions.minDateTime});

                    if (jsOptions.maxTime)
                        this.setOptions({maxTime: jsOptions.maxTime});
                    if (jsOptions.maxDate)
                        this.setOptions({maxDate: jsOptions.maxDate});
                    if (jsOptions.maxDateTime)
                        this.setOptions({maxDateTime: jsOptions.maxDateTime});
                }
            }
        });
    });
</script>