<%
var name = name || "";
var options = {
    placeholder: params.capitalize(name),
    type: "text",
    icon: {
        class: "lock",
        position: "left",
        color: TAG.table+"-800"
    },
    helptext: '',
    format: '',
    readonly: false,
    disabled: false,
    autocomplete: '',
    isPassword: true,
    posttype: "text"
    //maxlength: 10,

};
options = OBJECT.merge(options, opts);
options.autocomplete = options.autocomplete ? "autocomplete='Off'" : '';
options.model = options.model ? options.model : false;
var toclient = JSON.stringify(options);
%>
<script>
    <%= model %>.form.registerField("<%= name %>", "<%= toclient %>");
</script>
<div class="form-group-material form-group has-feedback  has-feedback-{{<%= model %>.form.options.<%= name %>.icon.position}}"
     id="input<%= name %>">
    <label

            class="control-label {{<%= model %>.form.LabelVisible('<%= name %>')?'is-visible animate':''}}">
        {{<%= model %>.form.options.<%= name %>.placeholder}}
    </label>


    <a title="View Password" id="list<%= name %>" class="label bg-<%= TAG.table %> label-icon"
       style="float: right;margin-bottom: -6px;" onclick="TurnPassword<%= model %>_<%= name %>('toggle')">
        <i id="passwordIcon<%= model %>_<%= name %>" class="icon-eye"></i>
    </a>

    <input
            autocomplete="off"
            ng-model="<%= model + "." + name %>" name="<%= model %>_<%= name %>"
            ng-readonly="<%= model %>.form.options.<%= name %>.readonly"
            ng-disabled="<%= model %>.form.options.<%= name %>.disabled"
            maxlength="{{<%= model %>.form.options.<%= name %>.maxlength}}"
            type="text"
            <%= options.model ? "value='{{" + options.model + "}}'" : "" %>
            class="form-control pw"
            placeholder="{{<%= model %>.form.options.<%= name %>.placeholder}}">

    <div class="form-control-feedback" ng-if="<%= model %>.form.options.<%= name %>.icon.class!=='none'">
        <i class="icon-{{<%= model %>.form.options.<%= name %>.icon.class}} text-{{<%= model %>.validation.getColor('<%= name %>',<%= model %>.form.options.<%= name %>.icon.color)}}">

        </i>
    </div>
    <span ng-if="<%= model %>.form.options.<%= name %>.helptext!=''"
          class="help-block text-muted">
        {{<%= model %>.form.options.<%= name %>.helptext}}
    </span>

    <span ng-show="<%= model %>.validation.getMessages('<%= name %>').length>0" class="help-block">

        <p class="text-{{$eval(validation).type}}"
           ng-repeat="(key,validation) in <%= model %>.validation.getMessages('<%= name %>') track by key">
               <i class="{{$eval(validation).icon}}"></i> {{$eval(validation).message}}
        </p>
    </span>
</div>

<script>


    function TurnPassword<%= model %>_<%= name %>(action) {
        var button = $("#passwordIcon<%= model %>_<%= name %>");
        var x = document.getElementsByName('<%= model %>_<%= name %>')[0];
        if (action === "toggle") {
            if (x.type === "password") {
                x.type = "text";
                button.removeClass('icon-eye');
                button.addClass('icon-eye-blocked');
            } else {
                if ($('[name="<%= model %>_<%= name %>"]').val() !== '') {
                    x.type = "password";
                    button.addClass('icon-eye');
                    button.removeClass('icon-eye-blocked');
                }
            }
        } else {
            if (action === "text") {
                x.type = "text";
                button.removeClass('icon-eye');
                button.addClass('icon-eye-blocked');
            } else {
                if ($('[name="<%= model %>_<%= name %>"]').val() !== '') {
                    x.type = "password";
                    button.addClass('icon-eye');
                    button.removeClass('icon-eye-blocked');
                }
            }
        }
    }



    <% if(options.maxlength){ %>
    $('[name="<%= model %>_<%= name %>"]').maxlength();
    <% } %>
    $('[name="<%= model %>_<%= name %>"]').keyup(function () {
        $meval = $(this).val();
        TurnPassword<%= model %>_<%= name %>('password');
        if (DSON.oseaX($meval)) {
            TurnPassword<%= model %>_<%= name %>('text');
        }
        if ($meval.indexOf(FORM.config.password) !== -1) {
            $(this).val($meval.replace(FORM.config.password, ''));
        }

        $(this).trigger("change");
        $("#input<%= name %>").removeClass('has-warning has-error has-success');
        $("#input<%= name %>").addClass('has-' + <%= model %>.validation.getType('<%= name %>')
    )
        ;
    });
    $('[name="<%= model %>_<%= name %>"]').trigger("change");

    $('[name="<%= model %>_<%= name %>"]').blur(function () {
        STEP.register({
                scope: "<%= model %>",
                action: "Change Password",
                field: "<%= name %>",
                value: <%= model %>.<%= name %>
        });
        $(".map-wrapper").hide();
    });
    setTimeout(function () {
        $("#input<%= name %>").addClass('has-' + <%= model %>.validation.getType('<%= name %>')
    )
        ;
    }, 100);
    var isReadProgram = <%= model %>.form.isReadOnly('<%= name %>');
    if (isReadProgram !== false) {
        <%= model %>.
        form.options.<%= name %>.disabled = true;
        if (isReadProgram !== undefined) {
            <%= model %>.<%= name %> = isReadProgram;

            if (<%= model %>.
            form.options.<%= name %>.isNumber
        )
            {
                $me = isReadProgram;
                $me = $me.replace(/\./g, 'POINT').replace(/\W/g, '').replace(/POINT/g, '.').replace(/[a-z]/gi, '');
                <%= model %>.
                <%= name %>_DragonClean = $me;
            }
            $('[name="<%= model %>_<%= name %>"]').val(isReadProgram);
        }
    }
</script>