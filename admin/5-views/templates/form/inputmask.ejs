<%
var name = name || "";
var options = {
    placeholder: params.capitalize(name),
    type: "text",
    icon: {
        class: "none",
        position: "left",
        color: TAG.table + "-800"
    },
    helptext: '',
    format: '',
    readonly: false,
    disabled: false,
    autocomplete: '',
    posttype: "text",
    isNumber: true
    //maxlength: 10,

};

options = OBJECT.merge(options, opts); var nameclean = name.replace(/\./g, '_');
options.autocomplete = options.autocomplete ? "autocomplete='Off'" : '';
options.format = options.format ? options.format : false;
options.model = options.model ? options.model : false;
var toclient = JSON.stringify(options);
%>
<script>

    <% if(options.isNumber){ %>
    <%= model %>.form.schemas.select["<%= name %>"] = FORM.schemasType.decimal;
    <% } %>

    <%= model %>.form.registerField("<%= name %>", "<%= toclient %>");
    <%= model %>.form.registerField("<%= name %>_DragonClean", "<%= toclient %>");

    if (MESSAGE.exist('columns.<%= nameclean %>')) {
        <%= model %>.
        form.options.<%= name %>.placeholder = MESSAGE.i('columns.<%= nameclean %>');
    }
</script>
<div class="form-group-material form-group has-feedback has-{{<%= model %>.validate['<%= name %>'].type || <%= model %>.defaultColor }}  has-feedback-{{::<%= model %>.form.options.<%= name %>.icon.position}}"
     id="input<%= model %>_<%= nameclean %>">
    <label
            class="control-label {{<%= model + "." + name %>?'is-visible animate':''}}">
        {{<%= model %>.form.options.<%= name %>.placeholder}}
    </label>
    <input
            ng-model="<%= model + "." + name %>" name="<%= model %>_<%= nameclean %>"
            ng-readonly="<%= model %>.form.options.<%= name %>.readonly"
            ng-disabled="<%= model %>.form.options.<%= name %>.disabled"
            maxlength="{{<%= model %>.form.options.<%= name %>.maxlength}}"
            type="text"
            class="form-control">

    <div class="form-control-feedback" ng-if="<%= model %>.form.options.<%= name %>.icon.class!=='none'">
        <i class="icon-{{<%= model %>.form.options.<%= name %>.icon.class}} text-{{<%= model %>.validate['<%= name %>'].type || <%= model %>.defaultColor }}">

        </i>
    </div>
    <span ng-if="<%= model %>.form.options.<%= name %>.helptext!=''"
          class="help-block text-muted">
        {{::<%= model %>.form.options.<%= name %>.helptext}}
    </span>

    <span ng-if="<%= model %>.validate['<%= name %>'].messages.length>0" class="help-block">

        <p class="text-{{validation.type}}"
           ng-repeat="(key,validation) in <%= model %>.validate['<%= name %>'].messages track by key">
               <i class="{{validation.icon}}"></i> {{validation.message}}
        </p>
    </span>
</div>

<script>

    var formaty =<%= model %>.form.options.<%= name %>.mask;
    $('[name="<%= model %>_<%= nameclean %>"]').inputmask(formaty);
    <% if(options.maxlength){ %>
    $('[name="<%= model %>_<%= nameclean %>"]').maxlength();
    <% } %>

    $('[name="<%= model %>_<%= nameclean %>"]').blur(function () {

        $me = $(this).val();
        $me = $me.replace(/\./g, 'POINT').replace(/\W/g, '').replace(/POINT/g, '.').replace(/[a-z]/gi, '');
        <%= model %>.
        <%= name %>_DragonClean = $me;

        STEP.register({
            scope: "<%= model %>",
            action: "Change Mask Text",
            field: "<%= name %>",
            value: <%= model %>.<%= name %>
    })
        ;
    });

    $('[name="<%= model %>_<%= nameclean %>"]').trigger('blur');

    var isReadProgram = <%= model %>.form.isReadOnly('<%= name %>');
    if (isReadProgram !== false) {
        <%= model %>.
        form.options.<%= name %>.disabled = true;
        if (isReadProgram !== undefined) {
            <%= model %>.<%= name %> = isReadProgram;
            $me = isReadProgram;
            $me = $me.replace(/\./g, 'POINT').replace(/\W/g, '').replace(/POINT/g, '.').replace(/[a-z]/gi, '');
            <%= model %>.
            <%= name %>_DragonClean = $me;
            $('[name="<%= model %>_<%= nameclean %>"]').val(isReadProgram);
        }
    }
</script>