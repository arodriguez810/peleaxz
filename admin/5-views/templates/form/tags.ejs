<%
var name = name || "";
var options = {
    placeholder: params.capitalize(name),
    helptext: '',
    posttype: "text",
    autocomplete: [
         {value: 'angel'},
    ],
    maxtags: 100,
    allowDuplicates: false

};
options = OBJECT.merge(options, opts);
var toclient = JSON.stringify(options);
%>
<script>
    <%= model %>.form.registerField("<%= name %>", "<%= toclient %>");
</script>
<div class="form-group-material form-group has-feedback has-{{<%= model %>.validation.getType('<%= name %>')}}  has-feedback-{{<%= model %>.form.options.<%= name %>.icon.position}}"
     id="input<%= name %>">
    <label
            class="control-label is-visible animate">
        {{<%= model %>.form.options.<%= name %>.placeholder}}
    </label>
    <input
            ng-model="<%= model + "." + name %>"
            name="<%= name %>"
            type="text"
            placeholder="<%= options.placeholder %>"
            class="form-control">


    <span ng-show="<%= model %>.form.options.<%= name %>.helptext!=''"
          class="help-block text-muted">
        {{<%= model %>.form.options.<%= name %>.helptext}}
    </span>

    <span ng-show="<%= model %>.validation.getMessages('<%= name %>').length>0" class="help-block">
        <p class="text-{{$eval(validation).type}}"
           ng-repeat="validation in <%= model %>.validation.getMessages('<%= name %>')">
               <i class="{{$eval(validation).icon}}"></i> {{$eval(validation).message}}
        </p>
    </span>
</div>
<script>
    $(document).ready(function () {
        var engine = new Bloodhound({
                local: <%= model %>.form.options.<%= name %>.autocomplete,
                datumTokenizer:function (d) {
                    return Bloodhound.tokenizers.whitespace(d.value);
                },
                queryTokenizer: Bloodhound.tokenizers.whitespace
        });
        engine.initialize();
        // Initialize tokenfield
        <!--$('[name="<%= name %>"]').tokenfield({-->
            <!--typeahead: [null, {-->
                <!--displayKey: 'value',-->
                <!--source: engine.ttAdapter()-->
            <!--}]-->
        <!--});-->
        $('[name="<%= name %>"]').tagsinput({
            maxTags: <%= model %>.form.options.<%= name %>.maxtags,
            allowDuplicates: <%= model %>.form.options.<%= name %>.allowDuplicates,
            tagClass: function(item){
                return 'label bg-'+TAG.table;
            },
            typeahead: [null, {
                displayKey: 'value',
                source: engine.ttAdapter()
            }]
        });
    });
</script>