<%
var name = name || "";
var options = {
    placeholder: params.capitalize(name),
    helptext: '',
    posttype: "text",
    autocomplete: [
         {value: 'angel'},
    ],
    maxtags: 100,
    disabled: false,
    allowDuplicates: false

};
options = OBJECT.merge(options, opts);
var toclient = JSON.stringify(options);
%>
<script>
    <%= model %>.form.registerField("<%= name %>", "<%= toclient %>");
    if(MESSAGE.exist('columns.<%= name %>')){
        <%= model %>.form.options.<%= name %>.placeholder = MESSAGE.i('columns.<%= name %>');
    }
</script>
<div class="form-group-material form-group has-feedback has-{{<%= model %>.validate['<%= name %>'].type || <%= model %>.defaultColor }}  has-feedback-{{<%= model %>.form.options.<%= name %>.icon.position}}"
     id="input<%= model %>_<%= name %>">
    <label
            class="control-label is-visible animate">
        {{<%= model %>.form.options.<%= name %>.placeholder}}
    </label>
    <input
            ng-model="<%= model + "." + name %>"
            name="<%= model %>_<%= name %>"
            type="text"
            ng-model-onblur
            ng-disabled="<%= model %>.form.options.<%= name %>.disabled"
            placeholder="<%= options.placeholder %>"
            class="form-control border-<%= TAG.table %>">


    <span ng-if="<%= model %>.form.options.<%= name %>.helptext!=''"
          class="help-block text-muted">
        {{<%= model %>.form.options.<%= name %>.helptext}}
    </span>

    <span ng-show="<%= model %>.validate['<%= name %>'].messages.length>0" class="help-block">
        <p class="text-{{validation.type}}"
           ng-repeat="(key,validation) in <%= model %>.validate['<%= name %>'].messages track by key">
               <i class="{{validation.icon}}"></i> {{validation.message}}
        </p>
    </span>
</div>
<script>
    $(document).ready(function () {
        var engine = new Bloodhound({
                local: <%= model %>.form.options.<%= name %>.autocomplete,
                datumTokenizer:function (d) {
                    return Bloodhound.tokenizers.whitespace(d.value);
                },
                queryTokenizer: Bloodhound.tokenizers.whitespace
        });
        engine.initialize();
        // Initialize tokenfield
        <!--$('[name="<%= model %>_<%= name %>"]').tokenfield({-->
            <!--typeahead: [null, {-->
                <!--displayKey: 'value',-->
                <!--source: engine.ttAdapter()-->
            <!--}]-->
        <!--});-->
        var isReadProgram = <%= model %>.form.isReadOnly('<%= name %>');
        if(isReadProgram!==false){
            <%= model %>.form.options.<%= name %>.disabled = true;
            if(isReadProgram!==undefined){
                <%= model %>.<%= name %> = isReadProgram;
                $('[name="<%= model %>_<%= name %>"]').val(isReadProgram);
            }
        }

        $('[name="<%= model %>_<%= name %>"]').tagsinput({
            maxTags: <%= model %>.form.options.<%= name %>.maxtags,
            allowDuplicates: <%= model %>.form.options.<%= name %>.allowDuplicates,
            tagClass: function(item){
                return 'label bg-'+TAG.table;
            },
            typeahead: [null, {
                displayKey: 'value',
                source: engine.ttAdapter()
            }]
        });

        $('[name="<%= model %>_<%= name %>"]').blur(function () {
            STEP.register({
                    scope: "<%= model %>",
                    action: "Change Tag",
                    field: "<%= name %>",
                    value: <%= model %>.<%= name %>
            });
            $(".map-wrapper").hide();
        });
        $(".bootstrap-tagsinput").addClass('alpha-'+TAG.table);
    });
</script>